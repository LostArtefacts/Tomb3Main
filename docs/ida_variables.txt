# Type information for the IDA importer.
#
# This is unrelated to the Tomb3Main codebase which is a subject to changes and
# improvements with regard to the original game. This file documents the
# Tomb3.exe layout.

# F - Function
# V - Variable
# S - Signature known
# R - Reverse engineered
# X - No reverse engineering needed or inlined in one of the reverse engineered functions
# C - Called from within one or more of the reverse engineered functions

FS- 00401000 000001D0 void phd_GenerateW2V(PHD_3DPOS *viewpos);
FS- 004012D0 000000F7 void phd_GetVectorAngles(int32_t x, int32_t y, int32_t z, PHD_ANGLE *dest);
FS- 004011D0 00000078 void phd_LookAt(int32_t xsrc, int32_t ysrc, int32_t zsrc, int32_t xtar, int32_t ytar, int32_t ztar, PHD_ANGLE roll);
FS- 00401350 0000008F void phd_NormaliseVector(int32_t x, int32_t y, int32_t z, int32_t *dest);
FS- 004013E0 000000AA void phd_RotX(PHD_ANGLE rx);
FS- 00401490 000000A8 void phd_RotY(PHD_ANGLE ry);
FS- 00401540 000000A8 void phd_RotZ(PHD_ANGLE rz);
FS- 004015F0 000001DC void phd_RotYXZ(PHD_ANGLE ry, PHD_ANGLE rx, PHD_ANGLE rz);
FS- 004017D0 000001E7 void phd_RotYXZpack(int32_t rots);
FS- 004019C0 000000AB bool phd_TranslateRel(int32_t x, int32_t y, int32_t z);
FS- 00401A70 0000007A void phd_TranslateAbs(int32_t x, int32_t y, int32_t z);
FS- 00401AF0 000000F7 void phd_PutPolygons(int16_t *objptr, int32_t clip_status);
FS- 00401BF0 000000E7 void S_InsertRoom(int16_t *objptr, bool outside);
FS- 00401CE0 00000032 int16_t *calc_back_light(int16_t *objptr);
FS- 00401D20 0000019F void S_InsertBackground(int16_t *objptr);
F-- 00401EC0 0000005D void sub_401EC0();
F-- 00401F20 00000036 void sub_401F20();
F-- 00401F60 000000C4 void sub_401F60();
F-- 00402030 0000009E void sub_402030();
F-- 00402130 00000095 void sub_402130();
F-- 00402180 0000006B void sub_402180();
F-- 004021A0 000001B2 void sub_4021A0();
F-- 00402640 000000D2 void sub_402640();
F-- 00402720 00000146 void sub_402720();
F-- 00402870 00000219 void sub_402870();
F-- 00402A90 00000284 void sub_402A90();
F-- 00402D20 00000FA8 void sub_402D20();
F-- 00403CD0 000014C3 void sub_403CD0();
F-- 00405220 00000030 void sub_405220();
F-- 00405270 00000121 void sub_405270();
F-- 004053A0 0000003D void sub_4053A0();
F-- 004053E0 00000068 void sub_4053E0();
F-- 00405450 00000523 void sub_405450();
F-- 00405980 000000FD void sub_405980();
F-- 00405A80 00000CC4 void sub_405A80();
F-- 00406750 00000027 void sub_406750();
F-- 00406780 00000030 void sub_406780();
F-- 004067B0 000000CE void sub_4067B0();
F-- 00406880 00000160 void sub_406880();
F-- 004069E0 00000370 void sub_4069E0();
F-- 00406D50 0000024E void sub_406D50();
F-- 00406FA0 00000140 void sub_406FA0();
F-- 004070E0 000015CC void sub_4070E0();
F-- 00408800 00000133 void sub_408800();
F-- 00408940 0000045C void sub_408940();
F-- 00408DA0 0000072F void sub_408DA0();
F-- 004094D0 0000008D void sub_4094D0();
F-- 00409560 00000642 void sub_409560();
F-- 00409BB0 0000047A void sub_409BB0();
F-- 0040A030 000004D5 void sub_40A030();
F-- 0040A510 00000179 void sub_40A510();
F-- 0040A690 000001B5 void sub_40A690();
F-- 0040A850 000001A6 void sub_40A850();
F-- 0040AA00 000001D8 void sub_40AA00();
F-- 0040ABE0 00000B0A void sub_40ABE0();
F-- 0040B6F0 000005E0 void sub_40B6F0();
F-- 0040BCD0 000003D4 void sub_40BCD0();
F-- 0040C0B0 0000099B void sub_40C0B0();
F-- 0040CA50 000002D0 void sub_40CA50();
F-- 0040CD20 0000033A void sub_40CD20();
F-- 0040D060 0000015D void sub_40D060();
F-- 0040D1C0 00000152 void S_DrawScreenSprite2d();
F-- 0040D320 000000A3 void S_DrawScreenSprite();
FS- 0040D5F0 00000052 void InitialiseBaton(int16_t item_num);
FS- 0040D650 00000CA6 void BatonControl(int16_t item_num);
FS- 0040E350 00000052 void InitialiseCivvy(int16_t item_num);
FS- 0040E3B0 000008A0 void CivvyControl(int16_t item_num);
FS- 0040ECA0 000003D6 void ControlElectricFence(int16_t item_num);
F-- 0040F080 00000101 void sub_40F080();
F-- 0040F190 000002D0 void sub_40F190();
F-- 0040F460 00000080 void sub_40F460();
F-- 0040F4E0 00000609 void sub_40F4E0();
F-- 0040FAF0 000001C2 void sub_40FAF0();
F-- 0040FCC0 000001D0 void sub_40FCC0();
F-- 0040FE90 00000008 void sub_40FE90();
F-- 0040FEA0 0000004E void sub_40FEA0();
F-- 0040FEF0 00000052 void InitialiseArmySMG();
F-- 0040FF50 000007CA void ArmySMGControl();
F-- 00410750 0000004B void InitialiseAutogun();
F-- 004107A0 00000345 void AutogunControl();
F-- 00410AF0 0000020A void sub_410AF0();
FS- 00410D00 00000042 void BigGunInitialise(int16_t item_num);
FS- 00410D50 00000103 void BigGunCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
F-- 00410E60 00000052 void sub_410E60();
FS- 00410EC0 0000023A void BigGunDraw(ITEM_INFO *v);
FS- 00411100 0000034D int32_t BigGunControl(COLL_INFO *coll);
F-- 00411450 0000008F void InitialiseVulture();
F-- 004114E0 00000213 void VultureControl();
F-- 00411710 0000089B void BlowpipeControl();
FS- 00411FE0 00000054 void InitialiseBoat(int16_t item_num);
F-- 00412040 0000016A void sub_412040();
FS- 004121B0 0000017C void BoatCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
F-- 00412330 000001C7 void sub_412330();
F-- 00412500 000001FE void sub_412500();
F-- 00412730 000000ED void sub_412730();
FS- 00412820 0000089A void BoatControl(int16_t item_num);
F-- 004130C0 000001CB void sub_4130C0();
F-- 00413290 000000FA void sub_413290();
F-- 00413390 0000004B void sub_413390();
F-- 004133E0 0000051C void sub_4133E0();
F-- 00413900 0000027C void DoShift();
F-- 00413B80 00000090 void sub_413B80();
F-- 00413C10 000000D1 void sub_413C10();
FS- 00413CF0 00000027 void DrawBoat(ITEM_INFO *item);
F-- 00413D20 000001D7 void sub_413D20();
F-- 00413F00 000000E2 void sub_413F00();
F-- 00413FF0 000000A6 void sub_413FF0();
F-- 004140A0 0000023F void sub_4140A0();
F-- 004142E0 0000004D void sub_4142E0();
FS- 00414330 00000058 int32_t CreatureActive(int16_t item_num);
FS- 00414390 000003EA void CreatureAIInfo(ITEM_INFO *item, AI_INFO *info);
F-- 00414780 00000072 void sub_414780();
F-- 00414800 00000208 void sub_414800();
F-- 00414A10 00000095 void sub_414A10();
F-- 00414AB0 000000A4 void sub_414AB0();
F-- 00414B60 000000AF void sub_414B60();
FS- 00414C10 00000216 void GetCreatureMood(ITEM_INFO *item, AI_INFO *info, int32_t violent);
FS- 00414E50 00000256 void CreatureMood(ITEM_INFO *item, AI_INFO *info, int32_t violent);
F-- 004150C0 000000FC void sub_4150C0();
F-- 004151C0 00000484 void sub_4151C0();
F-- 00415650 00000123 void sub_415650();
F-- 00415780 0000009A void sub_415780();
F-- 00415820 00000113 void sub_415820();
FS- 00415940 00000AB7 int32_t CreatureAnimation(int16_t item_num, int16_t angle, int16_t tilt);
FS- 00416400 000000CA int16_t CreatureTurn(ITEM_INFO *item, int16_t maximum_turn);
F-- 004164D0 00000035 void sub_4164D0();
F-- 00416510 00000051 void sub_416510();
F-- 00416570 000000AE void sub_416570();
FS- 00416620 00000050 void CreatureUnderwater(ITEM_INFO *item, int32_t depth);
FS- 00416670 0000005C int16_t CreatureEffect(ITEM_INFO *item, BITE_INFO *bite, int16_t (*generate)(int32_t x, int32_t y, int32_t z, int16_t speed, int16_t yrot, int16_t room_num));
F-- 004166D0 0000016D void sub_4166D0();
F-- 00416840 0000017F void sub_416840();
F-- 004169C0 00000061 void sub_4169C0();
F-- 00416A30 00000087 void sub_416A30();
F-- 00416AC0 00000095 void sub_416AC0();
F-- 00416B60 000005AB void sub_416B60();
F-- 00417110 000000F5 void sub_417110();
F-- 00417210 000000E6 void sub_417210();
F-- 00417300 0000013C void InitialiseCamera();
F-- 0041743C 00000867 void sub_41743C();
F-- 00417CA3 000006B9 void sub_417CA3();
F-- 0041835C 000006FA void sub_41835C();
F-- 00418A56 00000EA6 void sub_418A56();
F-- 004198FC 00000704 void CalculateCamera();
F-- 0041A000 000000BE void sub_41A000();
F-- 0041A0BE 00000583 void sub_41A0BE();
F-- 0041A641 00000249 void sub_41A641();
FS- 0041A890 0000005B int32_t DrawPhaseCinematic(void);
F-- 0041A8F0 0000003A void sub_41A8F0();
FS- 0041A930 00000110 int32_t StartCinematic(int32_t level_num);
FS- 0041AA40 0000008E void InitCinematicRooms(void);
FS- 0041AAD0 000000A3 void InitialisePlayer1(int16_t item_num);
F-- 0041AB80 00000099 void sub_41AB80();
F-- 0041AC20 0000007F void sub_41AC20();
FS- 0041ACA0 0000016F static int32_t DoCinematic(int32_t nframes);
F-- 0041AE10 00000274 void sub_41AE10();
F-- 0041B090 00000138 void sub_41B090();
F-- 0041B1D0 000000C7 void sub_41B1D0();
F-- 0041B2A0 00000246 void sub_41B2A0();
F-- 0041B4F0 000006BF void ClawmuteControl();
F-- 0041BBE0 000001BF void sub_41BBE0();
F-- 0041BDA0 00000122 void sub_41BDA0();
FS- 0041BED0 00000311 void ControlClawmutePlasmaBall(int16_t fx_num);
F-- 0041C1F0 000001E2 void sub_41C1F0();
F-- 0041C3E0 00000051 void InitialiseCleaner();
F-- 0041C440 00000C63 void CleanerControl();
F-- 0041D0B0 0000015E void sub_41D0B0();
F-- 0041D210 00000071 void InitialiseCobra();
F-- 0041D290 00000260 void CobraControl();
FS- 0041D500 00000BF5 void GetCollisionInfo(COLL_INFO *info, int32_t x, int32_t y, int32_t z, int16_t room_num, int32_t obj_height);
FS- 0041E140 0000002F int32_t FindGridShift(int32_t src, int32_t dst);
FS- 0041E170 000003DB int32_t CollideStaticObjects(COLL_INFO *coll, int32_t x, int32_t y, int32_t z, int16_t room_num, int32_t hite);
FS- 0041E560 000000C8 void GetNearByRooms(int32_t x, int32_t y, int32_t z, int32_t r, int32_t h, int16_t room_num);
FS- 0041E630 00000055 void GetNewRoom(int32_t x, int32_t y, int32_t z, int16_t room_num);
FS- 0041E690 00000037 void ShiftItem(ITEM_INFO *item, COLL_INFO *coll);
FS- 0041E6D0 0000005D void UpdateLaraRoom(ITEM_INFO *item, int32_t height);
FS- 0041E730 0000019A int16_t GetTiltType(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
FS- 0041E8D0 0000018C void LaraBaddieCollision(ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041EA60 00000170 void CreatureCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041EBD0 0000005C void ObjectCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041EC30 00000053 void ObjectCollisionSub(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041EC90 0000007E void DoorCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041ED10 0000008D void TrapCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0041EDA0 00000336 void ItemPushLara(ITEM_INFO *item, ITEM_INFO *lara_item, COLL_INFO *coll, int32_t spaz_on, int32_t big_push);
FS- 0041F0E0 000000CB int32_t TestBoundsCollide(ITEM_INFO *item, ITEM_INFO *lara_item, int32_t radius);
FS- 0041F1B0 00000138 int32_t TestLaraPosition(int16_t *bounds, ITEM_INFO *item, ITEM_INFO *lara_item);
FS- 0041F2F0 00000139 void AlignLaraPosition(PHD_VECTOR *vec, ITEM_INFO *item, ITEM_INFO *lara_item);
FS- 0041F430 0000018B int32_t MoveLaraPosition(PHD_VECTOR *vec, ITEM_INFO *item, ITEM_INFO *lara_item);
FS- 0041F5C0 0000016E int32_t Move3DPosTo3DPos(PHD_3DPOS *src_pos, PHD_3DPOS *dest_pos, int32_t velocity, PHD_ANGLE ang_add);
FS- 0041F730 00000018 void InitialiseCompy(int16_t item_num);
FS- 0041F750 000005D1 void CompyControl(int16_t item_num);
FS- 0041FD50 0000024B void CarcassControl(int16_t item_num);
FS- 0041FFA0 000005EC int32_t ControlPhase(int32_t nframes, int32_t demo_mode);
FS- 00420590 000003A3 void AnimateItem(ITEM_INFO *item);
FS- 00420970 000000AB int32_t GetChange(ITEM_INFO *item, ANIM_STRUCT *anim);
FS- 00420A20 0000005F void TranslateItem(ITEM_INFO *item, int32_t x, int32_t y, int32_t z);
FS- 00420A80 000001E1 FLOOR_INFO *GetFloor(int32_t x, int32_t y, int32_t z, int16_t *room_num);
FS- 00420C70 00000192 int32_t GetWaterHeight(int32_t x, int32_t y, int32_t z, int16_t room_num);
FS- 00420E10 00000514 int32_t GetHeight(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
FS- 00421370 000000EE void RefreshCamera(int16_t type, int16_t *data);
FS- 00421460 000008C7 void TestTriggers(int16_t *data, int32_t heavy);
FS- 00421D80 00000055 int32_t TriggerActive(ITEM_INFO *item);
FS- 00421DE0 0000049F int32_t GetCeiling(FLOOR_INFO *floor, int32_t x, int32_t y, int32_t z);
FS- 004222B0 000000B2 int16_t GetDoor(FLOOR_INFO *floor);
FS- 00422370 0000009F int32_t LOS(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 00422410 000002EB int32_t zLOS(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 00422700 000002EC int32_t xLOS(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 004229F0 00000240 int32_t ClipTarget(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 00422C30 0000030C int32_t ObjectOnLOS(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 00422F40 000000B3 void FlipMap(void);
FS- 00423000 0000009C void RemoveRoomFlipItems(ROOM_INFO *r);
FS- 004230A0 00000061 void AddRoomFlipItems(ROOM_INFO *r);
FS- 00423110 00000024 void TriggerCDTrack(int16_t value, int16_t flags, int16_t type);
FS- 00423140 000000AC void TriggerNormalCDTrack(int16_t value, int16_t flags, int16_t type);
FS- 004231F0 000000BB int32_t CheckNoColFloorTriangle(FLOOR_INFO *floor, int32_t x, int32_t z);
FS- 004232B0 000000F9 int32_t CheckNoColCeilingTriangle(FLOOR_INFO *floor, int32_t x, int32_t z);
F-- 004233B0 0000013F void sub_4233B0();
FS- 004234F0 000001B6 void CrocControl(int16_t item_num);
F-- 004236B0 00000059 void sub_4236B0();
FS- 00423710 00000182 int32_t StartDemo(int32_t level_num);
FS- 004238A0 000000CD void LoadLaraDemoPos(void);
FS- 00423970 0000002D void GetDemoInput(void);
FS- 004239A0 0000032D void DiverControl(int16_t item_num);
FS- 00423CF0 0000007A int16_t DiverHarpoon(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE yrot, int16_t room_num);;
FS- 00423D70 00000106 int32_t DiverGetWaterSurface(int32_t x, int32_t y, int32_t z, int16_t room_num);
FS- 00423E80 000001E1 void ControlGhostGasEmitter(int16_t item_num);
F-- 00424070 0000004C void InitialiseDog();
F-- 004240C0 00000566 void DogControl();
FS- 00424660 000001CA void ControlFlameThrower(int16_t fx_num);
F-- 00424830 000001DB void sub_424830();
F-- 00424A10 00000204 void sub_424A10();
FS- 00424C20 00000037 int32_t DrawPhaseGame(void);
FS- 00424C60 00000377 void DrawRooms(int16_t current_room);
F-- 00424FE0 000000B9 void xxxDrawRoomGeometry();
F-- 004250A0 00000313 void sub_4250A0();
FS- 004253C0 000001CA void GetRoomBounds(void);
F-- 00425590 00000375 void sub_425590();
F-- 00425910 000003FF void sub_425910();
F-- 00425D10 00000182 void sub_425D10();
FS- 00425EA0 00000734 void DrawAnimatingItem(ITEM_INFO *item);
FS- 004265E0 00001810 void DrawLara(ITEM_INFO *item);
FS- 00427E20 000014FF void DrawLaraInt(ITEM_INFO *item, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate);
FS- 00429350 00000034 void InitInterpolate2(int32_t frac, int32_t rate);
FS- 00429390 00000022 void phd_PopMatrix_I(void);
FS- 004293C0 00000027 void phd_PushMatrix_I(void);
FS- 004293F0 00000031 void phd_RotY_I(int16_t ang);
FS- 00429430 00000031 void phd_RotX_I(int16_t ang);
FS- 00429470 00000031 void phd_RotZ_I(int16_t ang);
FS- 004294B0 00000041 void phd_TranslateRel_I(int32_t x, int32_t y, int32_t z);
FS- 00429500 00000047 void phd_TranslateRel_ID(int32_t x, int32_t y, int32_t z, int32_t x2, int32_t y2, int32_t z2);
FS- 00429550 00000041 void phd_RotYXZ_I(int16_t y, int16_t x, int16_t z);
FS- 004295A0 0000003D void gar_RotYXZsuperpack_I(int16_t **pprot1, int16_t **pprot2, int32_t skip);
FS- 004295E0 000000A1 void gar_RotYXZsuperpack(int16_t **pprot, int32_t skip);
FS- 00429690 0000002A void phd_PutPolygons_I(int16_t *ptr, int32_t clip);
FS- 004296C0 0000026D void InterpolateMatrix(void);
FS- 00429930 000000F8 void InterpolateArmMatrix(void);
FS- 00429A30 00000141 void DrawGunFlash(int32_t weapon_type, int32_t clip);
FS- 00429BA0 00000160 void CalculateObjectLighting(ITEM_INFO *item, int16_t *frame);
FS- 00429D00 000000A6 void CalculateObjectLightingLara(void);
FS- 00429DB0 00000092 int32_t GetFrames(ITEM_INFO *item, int16_t *frm[], int32_t *rate);
FS- 00429E50 0000007C int16_t *GetBoundsAccurate(ITEM_INFO *item);
FS- 00429ED0 00000030 int16_t *GetBestFrame(ITEM_INFO *item);
FS- 00429F00 000000D9 void DetatchSpark(int32_t num, int32_t type);
FS- 00429FE0 0000009F int32_t GetFreeSpark(void);
FS- 0042A080 0000004E void InitialiseSparks(void);
FS- 0042A0D0 000005A2 void UpdateSparks(void);
FS- 0042A680 00000223 void TriggerRicochetSpark(GAME_VECTOR *pos, int32_t angle, int32_t size);
FS- 0042A8B0 000002C1 void TriggerFlareSparks(int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv, int32_t smoke, int32_t from_lara);
FS- 0042AB80 00000391 void TriggerExplosionSparks(int32_t x, int32_t y, int32_t z, int32_t extra_trigs, int32_t dyn);
FS- 0042AF20 00000203 void TriggerExplosionSmoke(int32_t x, int32_t y, int32_t z, int32_t uw);
FS- 0042B130 000001B5 void TriggerExplosionSmokeEnd(int32_t x, int32_t y, int32_t z, int32_t uw);
FS- 0042B2F0 000001FA void TriggerFireSmoke(int32_t x, int32_t y, int32_t z, int32_t body_part, int32_t type);
FS- 0042B4F0 00000286 void TriggerGunSmoke(int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv, int32_t initial, int32_t weapon, int32_t count);
FS- 0042B780 00000438 void TriggerFireFlame(int32_t x, int32_t y, int32_t z, int32_t body_part, int32_t type);
FS- 0042BBC0 000001DA void TriggerSideFlame(int32_t x, int32_t y, int32_t z, int32_t angle, int32_t speed, int32_t pilot);
FS- 0042BDA0 000000A3 void TriggerAlertLight(int32_t x, int32_t y, int32_t z, int32_t r, int32_t g, int32_t b, int32_t angle, int16_t room_num);
FS- 0042BE50 00000330 void TriggerGunShell(int16_t left_right, int32_t shell_type, int32_t weapon);
FS- 0042C1A0 00000256 void ControlGunShell(int16_t fx_num);
FS- 0042C400 00000110 void TriggerShotgunSparks(int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv);
FS- 0042C510 00000155 void TriggerRocketFlame(int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv, int32_t item_num);
FS- 0042C670 0000016E void TriggerRocketSmoke(int32_t x, int32_t y, int32_t z, int32_t body_part);
FS- 0042C7E0 0000016E void TriggerBlood(int32_t x, int32_t y, int32_t z, int32_t angle, int32_t num);
FS- 0042C950 0000016E void TriggerBloodD(int32_t x, int32_t y, int32_t z, int32_t angle, int32_t num);
FS- 0042CAC0 00000409 void SetupSplash(SPLASH_SETUP *spl);
FS- 0042CED0 000001A1 void UpdateSplashes(void);
FS- 0042D080 00000085 RIPPLE_STRUCT *SetupRipple(int32_t x, int32_t y, int32_t z, int32_t size, int32_t more_trans);
FS- 0042D110 00000065 void TriggerUnderwaterBlood(int32_t x, int32_t y, int32_t z, int32_t size);
FS- 0042D180 00000065 void TriggerUnderwaterBloodD(int32_t x, int32_t y, int32_t z, int32_t size);
FS- 0042D1F0 000001D7 void TriggerWaterfallMist(int32_t x, int32_t y, int32_t z, int32_t angle);
FS- 0042D3D0 00000135 void UpdateBats(void);
FS- 0042D510 00000055 void BatEmitterControl(int16_t item_num);
F-- 0042D570 000000C5 void sub_42D570();
F-- 0042D640 0000010B void TriggerStaticFlame();
F-- 0042D750 00000234 void sub_42D750();
F-- 0042D990 0000000B void sub_42D990();
F-- 0042D9A0 0000010D void KillEverything();
F-- 0042DAB0 000000EF void sub_42DAB0();
F-- 0042DBA0 0000014E void sub_42DBA0();
F-- 0042DCF0 0000010A void sub_42DCF0();
FS- 0042DE00 00000052 void TriggerDynamic(int32_t x, int32_t y, int32_t z, int32_t falloff, int32_t r, int32_t g, int32_t b);
F-- 0042DE60 0000001D void ClearDynamics();
F-- 0042DE80 00000237 void sub_42DE80();
F-- 0042E0C0 000000A5 void sub_42E0C0();
F-- 0042E170 0000008C void ItemNearLara();
F-- 0042E200 00000068 void SoundEffects();
F-- 0042E270 00000044 void sub_42E270();
FS- 0042E2C0 0000006E int16_t DoBloodSplat(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num);
FS- 0042E330 00000071 int16_t DoBloodSplatD(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num);
F-- 0042E3B0 000000A4 void sub_42E3B0();
FS- 0042E460 00000082 void DoLotsOfBlood(int32_t x, int32_t y, int32_t z, int16_t speed, PHD_ANGLE direction, int16_t room_num, int32_t num);
FS- 0042E4F0 000000C1 void CreateBubble(PHD_3DPOS *pos, int16_t room_num);
F-- 0042E5C0 00000070 void sub_42E5C0();
FS- 0042E630 0000011D void LaraBreath(ITEM_INFO *item);
FS- 0042E750 0000016C void ControlBubble1(int16_t fx_num);
FS- 0042E8C0 00000129 void Splash(ITEM_INFO *item);
FS- 0042E9F0 000001BD void WadeSplash(ITEM_INFO *item, int32_t water, int32_t water_depth);
FS- 0042EBB0 00000117 void WaterFall(int16_t item_num);
F-- 0042ECD0 0000000B void sub_42ECD0();
F-- 0042ECE0 00000016 void sub_42ECE0();
F-- 0042ED00 00000094 void sub_42ED00();
F-- 0042EDA0 00000040 void sub_42EDA0();
F-- 0042EDE0 0000001C void sub_42EDE0();
F-- 0042EE00 00000092 void sub_42EE00();
F-- 0042EEA0 00000023 void sub_42EEA0();
F-- 0042EED0 0000002C void sub_42EED0();
F-- 0042EF00 00000023 void sub_42EF00();
F-- 0042EF30 0000001C void sub_42EF30();
F-- 0042EF50 0000001C void sub_42EF50();
F-- 0042EF70 0000001C void sub_42EF70();
F-- 0042EF90 0000001C void sub_42EF90();
FS- 0042EFB0 00000041 void ControlDingDong(int16_t item_num);
FS- 0042F000 0000003B void ControlLaraAlarm(int16_t item_num);
FS- 0042F040 00000061 void ControlBirdTweeter(int16_t item_num);
F-- 0042F0B0 00000059 void sub_42F0B0();
FS- 0042F110 0000006F void ControlClockChimes(int16_t item_num);
F-- 0042F180 0000000A void sub_42F180();
F-- 0042F190 00000005 void sub_42F190();
F-- 0042F1A0 00000043 void sub_42F1A0();
F-- 0042F1F0 00000043 void sub_42F1F0();
F-- 0042F240 0000000A void sub_42F240();
F-- 0042F250 0000000A void sub_42F250();
F-- 0042F260 00000069 void sub_42F260();
F-- 0042F2D0 00000069 void sub_42F2D0();
F-- 0042F340 000000A1 void sub_42F340();
F-- 0042F3F0 0000000C void sub_42F3F0();
F-- 0042F400 0000001C void sub_42F400();
F-- 0042F420 0000000C void sub_42F420();
F-- 0042F430 0000000E void sub_42F430();
F-- 0042F440 00000005 void sub_42F440();
F-- 0042F450 0000003C void sub_42F450();
F-- 0042F490 0000001F void sub_42F490();
F-- 0042F4B0 00000021 void sub_42F4B0();
F-- 0042F4E0 0000002D void sub_42F4E0();
F-- 0042F510 0000002D void sub_42F510();
F-- 0042F540 00000085 void sub_42F540();
F-- 0042F5D0 0000002C void sub_42F5D0();
F-- 0042F600 00000026 void sub_42F600();
F-- 0042F630 00000056 void sub_42F630();
F-- 0042F690 0000002C void sub_42F690();
F-- 0042F6C0 0000002C void sub_42F6C0();
F-- 0042F6F0 0000002C void sub_42F6F0();
F-- 0042F720 0000002C void sub_42F720();
F-- 0042F750 0000002C void sub_42F750();
F-- 0042F780 0000002C void sub_42F780();
F-- 0042F7B0 0000002C void sub_42F7B0();
F-- 0042F7E0 0000002C void sub_42F7E0();
F-- 0042F810 0000002C void sub_42F810();
F-- 0042F840 0000002C void sub_42F840();
F-- 0042F870 0000002C void sub_42F870();
F-- 0042F8A0 0000002C void sub_42F8A0();
F-- 0042F8D0 0000002C void sub_42F8D0();
F-- 0042F900 0000002C void sub_42F900();
F-- 0042F930 0000002C void sub_42F930();
F-- 0042F960 0000002C void sub_42F960();
F-- 0042F990 0000002C void sub_42F990();
F-- 0042F9C0 00000036 void sub_42F9C0();
F-- 0042FA00 00000027 void sub_42FA00();
F-- 0042FA30 00000012 void sub_42FA30();
F-- 0042FA50 00000015 void sub_42FA50();
F-- 0042FA70 0000001C void sub_42FA70();
FS- 0042FA90 0000005D void BaddieBiteEffect(ITEM_INFO *item, BITE_INFO *bite);
FS- 0042FAF0 00000051 void InitialiseFireHead(int16_t item_num);
FS- 0042FB50 000002D5 void ControlFireHead(int16_t item_num);
F-- 0042FE30 000001DD void sub_42FE30();
FS- 00430010 0000003E void ControlRotateyThing(int16_t item_num);
F-- 00430050 00000251 void sub_430050();
F-- 004302B0 0000012F void sub_4302B0();
FS- 004303E0 00000944 void ControlFish(int16_t item_num);
F-- 00430D30 00000072 void sub_430D30();
F-- 00430DB0 00000872 void FlamerControl();
F-- 00431650 00000234 void sub_431650();
F-- 00431890 000001E7 void sub_431890();
F-- 00431A80 0000018B void sub_431A80();
F-- 00431C10 000002EB void sub_431C10();
F-- 00431F00 00000113 void sub_431F00();
F-- 00432020 0000000A void sub_432020();
FS- 00432030 00000250 int32_t GF_LoadScriptFile(char *fname);
FS- 00432280 0000001F int32_t GF_DoFrontEndSequence(void);
FS- 004322A0 00000066 int32_t GF_DoLevelSequence(int32_t level, int32_t type);
FS- 00432310 0000055C int32_t GF_InterpretSequence(int16_t *ptr, int32_t type, int32_t seq_type);
FS- 004328D0 00000EB8 void GF_ModifyInventory(int32_t level, int32_t type);
FS- 00433790 00000074 void InitialiseHair(void);
FS- 00433810 00000ABC void HairControl(int32_t in_cutscene);
FS- 004342E0 00000076 void DrawHair(void);
FS- 00434360 0000002D int32_t FlashIt(void);
FS- 00434390 00000180 void DrawAssaultTimer(void);
FS- 00434510 00000256 void DrawAssaultPenalties(int32_t type);
FS- 00434770 000001B6 void DrawQuadbikeLapTime(void);
FS- 00434930 000000DF void DrawGameInfo(int32_t timed);
FS- 00434A10 000000C8 void DrawHealthBar(int32_t flash_state);
FS- 00434AE0 000000E7 void DrawAirBar(int32_t flash_state);
FS- 00434BD0 0000001D void RemoveAmmoText(void);
FS- 00434BF0 00000131 void DrawAmmoInfo(void);
FS- 00434D50 00000015 void InitialisePickUpDisplay(void);
FS- 00434D70 0000003F void AddDisplayPickup(int16_t obj_num);
FS- 00434DB0 0000007A void DisplayModeInfo(char *string);
FS- 00434E30 0000002C void DrawModeInfo(void);
FS- 00434E60 00000571 void HybridControl(int16_t item_num);
FS- 00435400 00001372 int32_t Display_Inventory(int32_t inventory_mode);
FS- 00436840 00000179 void Construct_Inventory(void);
FS- 004369C0 0000008F void SelectMeshes(INVENTORY_ITEM *inv_item);
FS- 00436A50 00000081 int32_t AnimateInventoryItem(INVENTORY_ITEM *inv_item);
FS- 00436AE0 000004B0 void DrawInventoryItem(INVENTORY_ITEM *inv_item);
FS- 00436FA0 00000019 int32_t GetDebouncedInput(int32_t input);
FS- 00436FC0 0000008D void GetGlobeMeshFlags(void);
FS- 00437050 0000010A void InitColours(void);
FS- 00437160 00000177 void RingIsOpen(RING_INFO *ring);
FS- 004372F0 00000081 void RingIsNotOpen(RING_INFO *ring);
FS- 00437380 000003CA void RingNotActive(INVENTORY_ITEM *inv_item);
FS- 00437870 00000032 void RingActive(void);
FS- 004378B0 00000811 int32_t Inv_AddItem(int32_t item_num);
FS- 00438250 00000129 void Inv_InsertItem(INVENTORY_ITEM *inv_item);
FS- 00438380 00000077 int32_t Inv_RequestItem(int32_t item_num);
FS- 00438400 0000001B void Inv_RemoveAllItems(void);
FS- 00438420 00000110 int32_t Inv_RemoveItem(int32_t item_num);
FS- 00438530 000000DD int32_t Inv_GetItemOption(int32_t item_num);
FS- 00438770 00000024 void RemoveInventoryText(void);
FS- 004387A0 0000010F void Inv_RingInit(RING_INFO *ring, int16_t type, INVENTORY_ITEM **list, int16_t qty, int16_t current, IMOTION_INFO *imo);
FS- 004388B0 00000060 void Inv_RingGetView(RING_INFO *ring, PHD_3DPOS *viewer);
FS- 00438910 00000191 void Inv_RingLight(RING_INFO *ring, int16_t obj_num);
FS- 00438AB0 000002A7 void Inv_GlobeLight(int16_t obj_num);
FS- 00438D60 0000002C void Inv_RingCalcAdders(RING_INFO *ring, int16_t rotation_duration);
FS- 00438D90 0000013E void Inv_RingDoMotions(RING_INFO *ring);
FS- 00438ED0 0000002F void Inv_RingRotateLeft(RING_INFO *ring);
FS- 00438F00 0000002F void Inv_RingRotateRight(RING_INFO *ring);
FS- 00438F30 00000063 void Inv_RingMotionInit(RING_INFO *ring, int16_t frames, int16_t status, int16_t status_target);
FS- 00438FA0 0000002C void Inv_RingMotionSetup(RING_INFO *ring, int16_t status, int16_t status_target, int16_t frames);
FS- 00438FD0 00000026 void Inv_RingMotionRadius(RING_INFO *ring, int16_t target);
FS- 00439000 00000022 void Inv_RingMotionRotation(RING_INFO *ring, int16_t rotation, int16_t target);
FS- 00439030 00000025 void Inv_RingMotionCameraPos(RING_INFO *ring, int16_t target);
FS- 00439060 00000020 void Inv_RingMotionCameraPitch(RING_INFO *ring, int16_t target);
FS- 00439080 0000005D void Inv_RingMotionItemSelect(RING_INFO *ring, INVENTORY_ITEM *inv_item);
FS- 004390E0 00000063 void Inv_RingMotionItemDeselect(RING_INFO *ring, INVENTORY_ITEM *inv_item);
FS- 00439150 00000082 void Init_Requester(REQUEST_INFO *req);
FS- 004391E0 000000A3 void Remove_Requester(REQUEST_INFO *req);
FS- 00439290 0000001B void ReqItemCenterAlign(REQUEST_INFO *req, TEXTSTRING *txt);
FS- 004392B0 00000054 void ReqItemLeftAlign(REQUEST_INFO *req, TEXTSTRING *txt);
FS- 00439310 00000056 void ReqItemRightAlign(REQUEST_INFO *req, TEXTSTRING *txt);
FS- 00439370 00000809 int32_t Display_Requester(REQUEST_INFO *req, int32_t des, int32_t backgrounds);
FS- 00439B80 000000AA void SetRequesterHeading(REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
FS- 00439C30 00000013 void RemoveAllReqItems(REQUEST_INFO *req);
FS- 00439C50 000000C0 void ChangeRequesterItem(REQUEST_INFO *req, int32_t item, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
FS- 00439D10 000000AC void AddRequesterItem(REQUEST_INFO *req, char *text1, uint32_t flags1, char *text2, uint32_t flags2);
FS- 00439DC0 00000039 void SetPCRequesterSize(REQUEST_INFO *req, int32_t maxlines, int32_t ypos);
FS- 00439E00 0000005F int32_t AddAssaultTime(uint32_t time);
FS- 00439E60 0000005F int32_t AddQuadbikeTime(uint32_t time);
FS- 00439EC0 0000035A void ShowGymStatsText(char *time_str, int32_t type);
FS- 0043A220 00000386 void ShowStatsText(char *time_str, int32_t type);
FS- 0043A5B0 00000463 void ShowEndStatsScreen(void);
FS- 0043AA20 00000062 void InitialiseItemArray(int32_t num_items);
FS- 0043AA90 00000147 void KillItem(int16_t item_num);
FS- 0043ABE0 00000049 int16_t CreateItem(void);
FS- 0043AC30 00000201 void InitialiseItem(int16_t item_num);
FS- 0043AE40 000000A0 void RemoveActiveItem(int16_t item_num);
FS- 0043AEE0 00000080 void RemoveDrawnItem(int16_t item_num);
FS- 0043AF60 00000069 void AddActiveItem(int16_t item_num);
FS- 0043AFD0 000000AA void ItemNewRoom(int16_t item_num, int16_t room_num);
FS- 0043B080 00000080 int32_t GlobalItemReplace(int32_t in_obj_num, int32_t out_obj_num);
FS- 0043B100 00000030 void InitialiseFXArray(void);
FS- 0043B130 0000006C int16_t CreateEffect(int16_t room_num);
FS- 0043B1A0 000000EE void KillEffect(int16_t fx_num);
FS- 0043B290 00000093 void EffectNewRoom(int16_t fx_num, int16_t room_num);
FS- 0043B330 0000005B void ClearBodyBag(void);
FS- 0043B390 00000079 void LaraRapidsDrown(void);
FS- 0043B410 00000073 void KayakInitialise(int16_t item_num);
FS- 0043B490 00000026 void KayakDraw(ITEM_INFO *v);
FS- 0043B4C0 00000159 void KayakCollision(int16_t item_num, ITEM_INFO *l, COLL_INFO *coll);
FS- 0043B620 00000108 int32_t GetInKayak(int16_t item_num, COLL_INFO *coll);
FS- 0043B730 00000386 int32_t KayakControl(void);
FS- 0043BAC0 000001D6 void KayakDoWake(ITEM_INFO *v, int16_t x_off, int16_t z_off, int16_t rotate);
FS- 0043BCA0 0000005C void KayakUpdateWakeFX(void);
FS- 0043BD00 000000E1 void KayakSplash(ITEM_INFO *item, int32_t fall_speed, int32_t water);
FS- 0043BDF0 0000014B void KayakTriggerRapidsMist(int32_t x, int32_t y, int32_t z);
FS- 0043BF40 0000067C void KayakToBackground(ITEM_INFO *v, KAYAK_INFO *kayak);
FS- 0043C5C0 00000087 int32_t KayakGetCollisionAnim(ITEM_INFO *v, int32_t x_diff, int32_t z_diff);
FS- 0043C650 00000051 int32_t KayakDoDynamics(int32_t height, int32_t fall_speed, int32_t *y);
FS- 0043C6B0 00000183 void KayakDoCurrent(ITEM_INFO *item);
FS- 0043C840 00000116 int32_t KayakTestHeight(ITEM_INFO *item, int32_t x, int32_t z, PHD_VECTOR *pos);
FS- 0043C960 000002A0 int32_t KayakDoShift(ITEM_INFO *v, PHD_VECTOR *pos, PHD_VECTOR *old);
FS- 0043CC00 00000859 void KayakUserInput(ITEM_INFO *v, ITEM_INFO *l, KAYAK_INFO *kayak);
FS- 0043D4A0 000000A8 void KayakDoRipple(ITEM_INFO *v, int16_t x_off, int16_t z_off);
FS- 0043D550 00000042 int32_t KayakCanGetOut(ITEM_INFO *v, int32_t direction);
FS- 0043D5A0 000001D5 void KayakToBaddieCollision(ITEM_INFO *v);
FS- 0043D780 00000139 int32_t TestLaraSlide(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043D8C0 000000BE int32_t LaraTestClimbStance(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043D980 0000036E int32_t TestLaraVault(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043DCF0 00000105 void lara_slide_slope(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043DE00 00000032 void GetLaraCollisionInfo(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043DE40 00000136 void LaraDeflectEdgeJump(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043DFC0 000000AB void LaraSlideEdgeJump(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043E0B0 000000F5 int32_t LaraTestHangOnClimbWall(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043E1C0 00000300 void LaraHangTest(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043E4E0 0000024A int32_t LaraTestHangJump(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043E730 000000C1 int32_t TestHangSwingIn(ITEM_INFO *item, PHD_ANGLE angle);
FS- 0043E800 00000212 void LaraAboveWater(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EA20 00000080 void lara_as_duck(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EAA0 000000F2 void lara_col_duck(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EBA0 0000007A void lara_as_all4s(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EC20 000002D8 void lara_col_all4s(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EF10 000000CE void lara_as_crawl(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043EFE0 000000EF void lara_col_crawl(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F0D0 00000075 int32_t LaraDeflectEdgeDuck(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F150 00000064 void lara_as_all4turnl(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F1C0 00000028 void lara_col_all4turnlr(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F1F0 00000064 void lara_as_all4turnr(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F260 000000C2 void lara_as_crawlb(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F330 000000F5 void lara_col_crawlb(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F430 000001CE void lara_col_crawl2hang(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F600 00000119 void lara_as_dash(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F720 00000149 void lara_col_dash(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043F870 000000E1 int32_t TestWall(ITEM_INFO *item, int32_t front, int32_t right, int32_t down);
FS- 0043F980 0000009B void LaraCollideStop(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FA40 00000029 void lara_as_dashdive(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FA70 00000115 void lara_col_dashdive(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FB90 00000078 void lara_as_hang2(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FC10 00000053 void MonkeySwingFall(ITEM_INFO *item);
FS- 0043FC70 00000217 void lara_col_hang2(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FE90 00000045 void MonkeySwingSnap(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FEE0 000000CD int16_t TestMonkeyLeft(ITEM_INFO *item, COLL_INFO *coll);
FS- 0043FFB0 00000020 int16_t GetDirOctant(int32_t rot);
FS- 0043FFD0 000000C9 int16_t TestMonkeyRight(ITEM_INFO *item, COLL_INFO *coll);
FS- 004400A0 00000092 void lara_as_monkeyswing(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440140 000000DE void lara_col_monkeyswing(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440220 00000058 void lara_as_monkeyl(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440280 00000070 void lara_col_monkeyl(ITEM_INFO *item, COLL_INFO *coll);
FS- 004402F0 00000056 void lara_as_monkeyr(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440350 00000070 void lara_col_monkeyr(ITEM_INFO *item, COLL_INFO *coll);
FS- 004403C0 00000039 void lara_as_hangturnl(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440400 00000099 void lara_col_hangturnlr(ITEM_INFO *item, COLL_INFO *coll);
FS- 004404A0 00000039 void lara_as_hangturnr(ITEM_INFO *item, COLL_INFO *coll);
FS- 004404E0 00000018 void lara_as_monkey180(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440500 00000013 void lara_col_monkey180(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440520 00000440 void lara_as_stop(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440960 000000BF void lara_col_stop(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440A20 00000013 void lara_as_upjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440A40 0000014F void lara_col_upjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440B90 0000021E int32_t LaraTestHangJumpUp(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440DB0 000000D3 void lara_as_forwardjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440E90 0000008B void lara_as_walk(ITEM_INFO *item, COLL_INFO *coll);
FS- 00440F20 00000175 void lara_as_run(ITEM_INFO *item, COLL_INFO *coll);
FS- 004410A0 00000057 void lara_as_fastback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441100 0000009E void lara_as_turn_r(ITEM_INFO *item, COLL_INFO *coll);
FS- 004411A0 0000009E void lara_as_turn_l(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441240 00000017 void lara_as_death(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441260 00000040 void lara_as_fastfall(ITEM_INFO *item, COLL_INFO *coll);
FS- 004412A0 00000065 void lara_as_hang(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441310 0000001C void lara_as_reach(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441330 0000000A void lara_as_splat(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441340 0000010C void lara_as_compress(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441450 00000084 void lara_as_back(ITEM_INFO *item, COLL_INFO *coll);
FS- 004414E0 0000004B void lara_as_fastturn(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441530 0000007C void lara_as_stepright(ITEM_INFO *item, COLL_INFO *coll);
FS- 004415B0 0000007C void lara_as_stepleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441630 0000002B void lara_as_slide(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441660 0000004A void lara_as_backjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 004416B0 00000033 void lara_as_rightjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 004416F0 00000033 void lara_as_leftjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441730 0000002C void lara_as_fallback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441760 00000038 void lara_as_hangleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 004417A0 00000038 void lara_as_hangright(ITEM_INFO *item, COLL_INFO *coll);
FS- 004417E0 00000018 void lara_as_slideback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441800 00000033 void lara_as_pushblock(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441840 0000002A void lara_as_ppready(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441870 00000033 void lara_as_pickup(ITEM_INFO *item, COLL_INFO *coll);
FS- 004418B0 0000005B void lara_as_pickupflare(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441910 0000003C void lara_as_switchon(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441950 00000033 void lara_as_usekey(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441990 0000001D void lara_as_special(ITEM_INFO *item, COLL_INFO *coll);
FS- 004419B0 00000035 void lara_as_swandive(ITEM_INFO *item, COLL_INFO *coll);
FS- 004419F0 0000005A void lara_as_fastdive(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441A50 0000000E void lara_as_null(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441A60 00000018 void lara_as_waterout(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441A80 0000017C void lara_as_wade(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441C00 00000099 void lara_as_deathslide(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441CA0 0000004C void extra_as_breath(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441CF0 00000091 void extra_as_sharkkill(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441D90 00000013 void extra_as_airlock(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441DB0 0000001D void extra_as_gongbong(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441DD0 00000051 void extra_as_dinokill(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441E30 0000004D void extra_as_startanim(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441E80 0000007E void extra_as_trainkill(ITEM_INFO *item, COLL_INFO *col);
FS- 00441F00 00000088 void extra_as_rapidsdrown(ITEM_INFO *item, COLL_INFO *coll);
FS- 00441F90 000001A7 void lara_col_walk(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442140 00000189 void lara_col_run(ITEM_INFO *item, COLL_INFO *coll);
FS- 004422D0 000000DA void lara_col_forward_jump(ITEM_INFO *item, COLL_INFO *coll);
FS- 004423B0 000000DA void lara_col_fastback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442490 000000EB void lara_col_turn_r(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442580 00000013 void lara_col_turn_l(ITEM_INFO *item, COLL_INFO *coll);
FS- 004425A0 00000068 void lara_col_death(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442610 0000009F void lara_col_fastfall(ITEM_INFO *item, COLL_INFO *coll);
FS- 004426B0 0000017E void lara_col_hang(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442830 000000AA void lara_col_reach(ITEM_INFO *item, COLL_INFO *coll);
FS- 004428E0 0000006C void lara_col_splat(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442950 00000013 void lara_col_land(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442970 0000009C void lara_col_compress(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442A10 0000013D void lara_col_back(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442B50 000000D4 void lara_col_stepright(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442C30 00000013 void lara_col_stepleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442C50 0000001E void lara_col_slide(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442C70 00000023 void lara_col_backjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442CA0 00000023 void lara_col_rightjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442CD0 00000023 void lara_col_leftjump(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442D00 00000086 void lara_col_fallback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442D90 00000033 void lara_col_hangleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442DD0 00000033 void lara_col_hangright(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442E10 00000023 void lara_col_slideback(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442E40 00000013 void lara_col_null(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442E60 00000097 void lara_col_roll(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442F00 000000CC void lara_col_roll2(ITEM_INFO *item, COLL_INFO *coll);
FS- 00442FD0 0000006C void lara_col_swandive(ITEM_INFO *item, COLL_INFO *coll);
FS- 00443040 0000007C void lara_col_fastdive(ITEM_INFO *item, COLL_INFO *coll);
FS- 004430C0 000001C4 void lara_col_wade(ITEM_INFO *item, COLL_INFO *coll);
FS- 00443290 00000049 void lara_default_col(ITEM_INFO *item, COLL_INFO *coll);
FS- 004432E0 00000077 void lara_col_jumper(ITEM_INFO *item, COLL_INFO *coll);
FS- 00443360 00000863 void GetLaraHandAbsPosition(PHD_VECTOR *vec, int32_t left_right);
FS- 00443C10 00000083 void AddJointPos(ITEM_INFO *item, int32_t mesh);
FS- 00443CA0 000009FD void GetLHAInt(ITEM_INFO *item, PHD_VECTOR *vec, int16_t *frame1, int16_t *frame2, int32_t frac, int32_t rate, int32_t left_right);
FS- 004446E0 00000084 void LookUpDown(void);
FS- 00444770 00000086 void LookLeftRight(void);
FS- 00444800 00000097 void ResetLook(void);
FS- 004448A0 000000D4 void DeathSlideCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 00444980 0000029F void ControlDeathSlide(int16_t item_num);
FS- 00444C20 000000EB int32_t LaraLandedBad(ITEM_INFO *item, COLL_INFO *coll);
FS- 00444D10 0000006A int32_t LaraHitCeiling(ITEM_INFO *item, COLL_INFO *coll);
FS- 00444D80 00000075 int16_t LaraFloorFront(ITEM_INFO *item, PHD_ANGLE ang, int32_t dist);
FS- 00444E00 0000007E int16_t LaraCeilingFront(ITEM_INFO *item, PHD_ANGLE ang, int32_t dist);
FS- 00444E80 00000054 int32_t LaraFallen(ITEM_INFO *item, COLL_INFO *coll);
FS- 00444EE0 000000AD int32_t LaraTestEdgeCatch(ITEM_INFO *item, COLL_INFO *coll, int32_t *edge);
FS- 00444F90 00000082 int32_t LaraDeflectEdge(ITEM_INFO *item, COLL_INFO *coll);
FS- 00445020 00000222 int32_t GetStaticObjects(ITEM_INFO *item, PHD_ANGLE ang, int32_t hite, int32_t radius, int32_t dist);
FS- 00445250 00000034 void draw_shotgun_meshes(int32_t weapon_type);
FS- 00445290 0000002B void undraw_shotgun_meshes(int32_t weapon_type);
FS- 004452C0 00000071 void ready_shotgun(int32_t weapon_type);
FS- 00445340 00000214 void RifleHandler(int32_t weapon_type);
FS- 00445560 000001FB void FireShotgun(void);
FS- 00445760 000000C0 void FireM16(int32_t running);
FS- 00445820 00000185 void FireHarpoon(void);
FS- 004459B0 00000595 void ControlHarpoonBolt(int16_t item_num);
FS- 00445F50 0000028B void FireRocket(void);
FS- 004461E0 000009B3 void ControlRocket(int16_t item_num);
FS- 00446BA0 00000230 void FireGrenade(void);
FS- 00446DD0 000007F8 void ControlGrenade(int16_t item_num);
FS- 004475D0 00000198 void draw_shotgun(int32_t weapon_type);
FS- 00447770 00000109 void undraw_shotgun(int32_t weapon_type);
FS- 00447880 000004E7 void AnimateShotgun(int32_t weapon_type);
FS- 00447D90 00000192 void TriggerUnderwaterExplosion(ITEM_INFO *item);
FS- 00447F30 0000009E void draw_pistols(int32_t weapon_type);
FS- 00447FD0 00000078 void set_arm_info(LARA_ARM *arm, int32_t frame);
FS- 00448050 00000275 void undraw_pistols(int32_t weapon_type);
FS- 004482D0 00000071 void ready_pistols(int32_t weapon_type);
FS- 00448350 00000059 void draw_pistol_meshes(int32_t weapon_type);
FS- 004483B0 00000041 void undraw_pistol_mesh_left(int32_t weapon_type);
FS- 00448400 0000003B void undraw_pistol_mesh_right(int32_t weapon_type);
FS- 00448440 00000205 void PistolHandler(int32_t weapon_type);
FS- 00448650 00000582 void AnimatePistols(int32_t weapon_type);
FS- 00448BE0 00000280 int32_t LaraTestClimb(int32_t x, int32_t y, int32_t z, int32_t x_front, int32_t z_front, int32_t item_height, int16_t item_room, int32_t *shift);
FS- 00448E60 00000229 int32_t LaraTestClimbUpPos(ITEM_INFO *item, int32_t front, int32_t right, int32_t *shift, int32_t *ledge);
FS- 00449090 000000B0 int32_t LaraTestClimbPos(ITEM_INFO *item, int32_t front, int32_t right, int32_t origin, int32_t height, int32_t *shift);
FS- 00449140 00000038 void lara_as_climbleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449180 00000038 void lara_as_climbright(ITEM_INFO *item, COLL_INFO *coll);
FS- 004491C0 00000078 void lara_as_climbstnc(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449240 00000017 void lara_as_climbing(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449260 00000021 void lara_as_climbend(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449290 00000017 void lara_as_climbdown(ITEM_INFO *item, COLL_INFO *coll);
FS- 004492B0 0000005D void lara_col_climbleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449310 000000CC int32_t LaraCheckForLetGo(ITEM_INFO *item, COLL_INFO *coll);
FS- 004493E0 000000EF void LaraDoClimbLeftRight(ITEM_INFO *item, COLL_INFO *coll, int32_t result, int32_t shift);
FS- 004494D0 00000059 void lara_col_climbright(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449530 0000020D void lara_col_climbstnc(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449740 0000014C void lara_col_climbing(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449890 0000019D void lara_col_climbdown(ITEM_INFO *item, COLL_INFO *coll);
FS- 00449A30 0000017F void UpdateElectricityPoints(void);
FS- 00449BB0 0000055A void LaraGun(void);
FS- 0044A1A0 0000003B int32_t CheckForHoldingState(int32_t state);
FS- 0044A1E0 0000011D void InitialiseNewWeapon(void);
FS- 0044A330 00000194 void LaraTargetInfo(WEAPON_INFO *winfo);
FS- 0044A4D0 0000022D void LaraGetNewTarget(WEAPON_INFO *winfo);
FS- 0044A700 000000AA void find_target_point(ITEM_INFO *item, GAME_VECTOR *target);
FS- 0044A7B0 000000D1 void AimWeapon(WEAPON_INFO *winfo, LARA_ARM *arm);
FS- 0044A890 00000572 int32_t FireWeapon(int32_t weapon_type, ITEM_INFO *target, ITEM_INFO *src, PHD_ANGLE *angles);
FS- 0044AE20 000000B9 void HitTarget(ITEM_INFO *item, GAME_VECTOR *hit_pos, int32_t damage);
FS- 0044AEE0 0000006A void SmashItem(int16_t item_num, int32_t weapon_type);
FS- 0044AF50 00000043 int32_t WeaponObject(int32_t weapon_type);
FS- 0044AFB0 0000098C void DoProperDetection(int16_t item_num, int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv);
FS- 0044B940 000001AF int32_t DoFlareLight(PHD_VECTOR *pos, int32_t flare_age);
FS- 0044BAF0 000000DA void DoFlareInHand(int32_t flare_age);
FS- 0044BBD0 000001B8 void DrawFlareInAir(ITEM_INFO *item);
FS- 0044BD90 000001E2 void CreateFlare(int32_t thrown);
FS- 0044BF80 0000004B void set_flare_arm(int32_t frame);
FS- 0044BFD0 00000175 void draw_flare(void);
FS- 0044C150 00000269 void undraw_flare(void);
FS- 0044C3C0 00000018 void draw_flare_meshes(void);
FS- 0044C3E0 00000018 void undraw_flare_meshes(void);
FS- 0044C400 0000003E void ready_flare(void);
FS- 0044C440 000001E5 void FlareControl(int16_t item_num);
FS- 0044C630 000000B7 void LaraCheatGetStuff(void);
FS- 0044C6F0 000008A4 void LaraControl(int16_t item_num);
FS- 0044CFC0 0000009C void LaraCheat(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044D060 00000129 void LaraInitialiseMeshes(int32_t level_num);
FS- 0044D1A0 000000FF void LaraCheatyBits(void);
FS- 0044D2A0 000003B1 void AnimateLara(ITEM_INFO *item);
FS- 0044D690 00000164 void UseItem(int16_t obj_num);
FS- 0044D880 0000001F void ControlLaraExtra(int16_t item_num);
FS- 0044D8A0 00000024 void InitialiseLaraLoad(int16_t item_num);
FS- 0044D8D0 0000032C void InitialiseLara(int32_t type);
FS- 0044DC00 00000443 void InitialiseLaraInventory(int32_t level_num);
FS- 0044E050 00000170 void LaraSurface(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E1C0 00000070 void lara_as_surfswim(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E230 0000005E void lara_as_surfback(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E290 00000060 void lara_as_surfleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E2F0 00000060 void lara_as_surfright(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E350 000000B9 void lara_as_surftread(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E410 00000032 void lara_col_surfswim(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E450 00000215 int32_t LaraTestWaterClimbOut(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E670 000000FA void LaraSurfaceCollision(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E770 000000EF int32_t LaraTestWaterStepOut(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E860 00000023 void lara_col_surfback(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E890 00000023 void lara_col_surfleft(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E8C0 00000023 void lara_col_surfright(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E8F0 00000057 void lara_col_surftread(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044E950 0000024B void LaraUnderWater(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EBA0 0000006B void lara_as_swim(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EC10 00000086 void SwimTurn(ITEM_INFO *item);
FS- 0044ECA0 00000076 void lara_as_glide(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044ED20 00000085 void lara_as_tread(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EDB0 00000014 void lara_as_dive(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EDD0 00000053 void lara_as_uwdeath(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EE30 0000000B void lara_as_waterroll(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EE40 00000013 void lara_col_swim(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EE60 0000015C void LaraSwimCollision(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044EFC0 000000D1 void LaraTestWaterDepth(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F0A0 00000013 void lara_col_glide(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F0C0 00000013 void lara_col_tread(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F0E0 00000013 void lara_col_dive(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F100 0000005B void lara_col_uwdeath(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F160 00000013 void lara_col_waterroll(ITEM_INFO *item, COLL_INFO *coll);
FS- 0044F180 0000018F int32_t GetWaterDepth(int32_t x, int32_t y, int32_t z, int16_t room_num);
FS- 0044F310 0000026D void LaraWaterCurrent(COLL_INFO *coll);
FS- 0044F580 00000213 int32_t LaraOnLOS(GAME_VECTOR *start, GAME_VECTOR *target);
FS- 0044F7A0 00000063 void UpdateLaserShades(void);
FS- 0044F810 0000001F void LaserControl(int16_t item_num);
FS- 0044F830 0000014C void LaserSplitterToggle(ITEM_INFO *item);
FS- 0044F980 0000023A void S_DrawLaser(ITEM_INFO *item);
FS- 0044FBC0 000007D3 void LizManControl(int16_t item_num);
FS- 004503E0 00000240 int16_t TriggerLizmanGasThrower(ITEM_INFO *item, BITE_INFO *bite, int16_t speed);
FS- 00450620 000001D5 void TriggerLizmanGas(int32_t x, int32_t y, int32_t z, int32_t xv, int32_t yv, int32_t zv, int32_t fx_num);
FS- 00450800 00000DF7 void LondonBossControl(int16_t item_num);
FS- 00451640 00000060 void S_DrawLondonBoss(ITEM_INFO *item);
FS- 004516A0 00000089 void InitialiseLondonBoss(int16_t item_num);
FS- 00451730 0000024F void ExplodeLondonBoss(ITEM_INFO *item);
FS- 00451980 0000012E void TriggerLaserBolt(PHD_VECTOR *pos, ITEM_INFO *item, int32_t type, int16_t yang);
FS- 00451AB0 0000032E void ControlLaserBolts(int16_t item_num);
FS- 00451DE0 0000009F void TriggerPlasmaBall(ITEM_INFO *item, int32_t type, PHD_VECTOR *pos1, int16_t room_num, int16_t angle);
FS- 00451E80 00000208 void ControlLondBossPlasmaBall(int16_t fx_num);
FS- 00452090 000001A9 void TriggerPlasmaBallFlame(int16_t fx_num, int32_t type, int32_t xv, int32_t yv, int32_t zv);
FS- 00452240 0000017A int32_t KnockBackCollision(EXPLOSION_RING *erptr);
FS- 004523C0 00000AFB void LondSecControl(int16_t item_num);
FS- 00452F10 0000007C void InitialiseLOTarray(void);
FS- 00452F90 00000068 void DisableBaddieAI(int16_t item_num);
FS- 00453000 000001EE int32_t EnableBaddieAI(int16_t item_num, int32_t always);
FS- 004531F0 00000138 void InitialiseSlot(int16_t item_num, int32_t slot);
FS- 00453460 000000F7 void CreateZone(ITEM_INFO *item);
FS- 00453560 0000004B void ClearLOT(LOT_INFO *LOT);
FS- 004535B0 00000183 int32_t EnableNonLotAI(int16_t item_num, int32_t always);
FS- 00453740 000000F8 void InitialiseNonLotAI(int16_t item_num, int32_t slot);
FS- 00453890 00000098 int16_t MineCartGetCollision(ITEM_INFO *v, int16_t ang, int32_t dist, int16_t *ceiling);
FS- 00453930 00000027 void MineCartInitialise(int16_t item_num);
FS- 00453960 0000014D void MineCartCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 00453AB0 000000C1 int32_t GetInMineCart(ITEM_INFO *v, ITEM_INFO *l, COLL_INFO *coll);
FS- 00453B80 00000117 int32_t MineCartControl(void);
FS- 00453CA0 0000052B void MoveCart(ITEM_INFO *v, ITEM_INFO *l, CART_INFO *cart);
FS- 004541F0 000000A8 int32_t MineCartTestHeight(ITEM_INFO *v, int32_t x, int32_t z);
FS- 004542A0 00000903 void MineCartDoUserInput(ITEM_INFO *v, ITEM_INFO *l, CART_INFO *cart);
FS- 00454C00 0000010E int32_t MineCartCanGetOut(int32_t direction);
FS- 00454D10 00000292 void CartToBaddieCollision(ITEM_INFO *v);
FS- 00454FB0 00000308 void ControlMissile(int16_t fx_num);
F-- 004552C0 000000A7 void sub_4552C0();
FS- 00455370 0000042B int32_t ExplodingDeath(int16_t item_num, int32_t mesh_bits, int16_t damage);;
FS- 004557A0 0000020E void ControlBodyPart(int16_t fx_num);
F-- 004559B0 00000052 void InitialiseMonkey();
F-- 00455A10 0000041E void DrawMonkey();
F-- 00455E30 00000CB9 void MonkeyControl();
F-- 00456B50 00000050 void sub_456B50();
F-- 00456BA0 00000225 void sub_456BA0();
F-- 00456DD0 0000016F void sub_456DD0();
F-- 00456F40 0000027C void sub_456F40();
F-- 004571E0 000001A3 void sub_4571E0();
F-- 004573A0 0000004E void sub_4573A0();
F-- 004573F0 0000028F void sub_4573F0();
FS- 00457690 000000C3 void AlterFloorHeight(ITEM_INFO *item, int32_t height);
F-- 00457760 00000025 void sub_457760();
F-- 00457790 0000006B void sub_457790();
F-- 00457800 0000023F void sub_457800();
F-- 00457A40 00000BD3 void MPGunControl();
FS- 00458660 00000190 void EarthQuake(int16_t item_num);
FS- 004587F0 00000049 void ControlCutShotgun(int16_t item_num);
F-- 00458840 0000003F void sub_458840();
FS- 00458880 00000221 void FinalLevelCounter(int16_t item_num);
F-- 00458AB0 000000DE void sub_458AB0();
FS- 00458B90 00000083 void InitialiseWindow(int16_t item_num);
F-- 00458C20 000000FA void sub_458C20();
FS- 00458D20 0000009A void WindowControl(int16_t item_num);
F-- 00458DC0 00000042 void sub_458DC0();
F-- 00458E10 00000032 void sub_458E10();
F-- 00458E50 0000040F void sub_458E50();
F-- 00459260 000000CC void sub_459260();
F-- 00459330 000000B1 void sub_459330();
FS- 004593F0 00000052 void DrawBridgeFloor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 00459450 0000003B void DrawBridgeCeiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 00459490 0000002F void DrawBridgeCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 004594C0 00000039 void InitialiseLift(int16_t item_num);
FS- 00459500 000000D8 void LiftControl(int16_t item_num);
F-- 004595E0 00000179 void sub_4595E0();
FS- 00459760 0000003F void LiftFloor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 004597A0 00000035 void LiftCeiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 004597E0 00000038 void BridgeFlatFloor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 00459820 0000001B void BridgeFlatCeiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
F-- 00459840 0000003B void sub_459840();
FS- 00459880 00000052 void BridgeTilt1Floor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 004598E0 00000035 void BridgeTilt1Ceiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 00459920 00000051 void BridgeTilt2Floor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 00459980 00000034 void BridgeTilt2Ceiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 004599C0 00000090 void GeneralControl(int16_t item_num);
FS- 00459A50 00000071 void DetonatorControl(int16_t item_num);
FS- 00459AD0 0000002E void ControlAnimating_1_4(int16_t item_num);
FS- 00459B00 000000F4 void ControlStrobeLight(int16_t item_num);
FS- 00459C00 00000084 void ControlPulseLight(int16_t item_num);
FS- 00459C90 00000041 void ControlOnOffLight(int16_t item_num);
FS- 00459CE0 0000010A void ControlElectricalLight(int16_t item_num);
FS- 00459DF0 00000072 void ControlBeaconLight(int16_t item_num);
F-- 00459E70 00000B35 void OilRedControl();
F-- 0045AA00 00000052 void InitialiseOilSMG();
F-- 0045AA60 000007C8 void OilSMGControl();
F-- 0045B260 000002DC void OrcaControl();
F-- 0045B540 000000C4 void sub_45B540();
F-- 0045B610 000000D2 void sub_45B610();
F-- 0045B6F0 00000005 void sub_45B6F0();
F-- 0045B700 000000B9 void sub_45B700();
F-- 0045B7C0 000000A7 void sub_45B7C0();
F-- 0045B870 00000384 void sub_45B870();
FS- 0045BC00 00000563 void PickUpCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);;
FS- 0045C170 00000289 void SwitchCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0045C400 00000107 void SwitchCollision2(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0045C510 0000019D void DetonatorCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0045C6B0 0000023E void KeyHoleCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0045C900 00000332 void PuzzleHoleCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0045CC60 0000004B void SwitchControl(int16_t item_num);
F-- 0045CCB0 00000096 void sub_45CCB0();
F-- 0045CD50 00000048 void sub_45CD50();
F-- 0045CDA0 0000003E void sub_45CDA0();
F-- 0045CDE0 00000084 void sub_45CDE0();
FS- 0045CE70 0000017B void AnimatingPickUp(int16_t item_num);
F-- 0045CFF0 00000052 void InitialisePrisoner();
F-- 0045D050 00000B2B void PrisonerControl();
F-- 0045DBD0 00000052 void InitialisePunk();
F-- 0045DC30 00000961 void PunkControl();
F-- 0045E5E0 000001F1 void sub_45E5E0();
FS- 0045E7E0 0000004B void InitialiseQuadBike(int16_t item_num);
FS- 0045E830 000001A8 void QuadBikeCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
F-- 0045E9E0 0000013E void sub_45E9E0();
FS- 0045EB20 000002F1 void QuadBikeDraw(ITEM_INFO *item);
FS- 0045EE20 00000581 int32_t QuadBikeControl(void);
FS- 0045F3C0 000000CE void QuadbikeExplode(ITEM_INFO *v);
F-- 0045F490 000001AF void sub_45F490();
F-- 0045F640 000000DF void SkidooTestHeight();
F-- 0045F720 00000054 void QuadBikeDoDynamics();
F-- 0045F780 0000082E void SkidooDynamics();
F-- 0045FFB0 000001E9 void SkidooBaddieCollision();
F-- 004601A0 00000090 void SkidoGetCollisionAnim();
F-- 00460230 00000430 void AnimateQuadBike();
F-- 004606A0 00000100 void CanGetOff();
F-- 004607A0 00000429 void QuadBikeUserControl();
F-- 00460BD0 000001C7 void TriggerExhaustSmoke();
F-- 00460DA0 0000026B void sub_460DA0();
F-- 00461010 00000025 void sub_461010();
F-- 00461040 000006DE void RaptorControl();
F-- 00461740 000001F5 void MouseControl();
F-- 00461950 00000102 void sub_461950();
F-- 00461A60 000000F0 void ModifyStartInfo();
F-- 00461B50 0000027A void CreateStartInfo();
F-- 00461DD0 00000618 void CreateSaveGameInfo();
F-- 004623F0 000009F2 void sub_4623F0();
F-- 00462DF0 00000015 void sub_462DF0();
F-- 00462E10 0000004C void sub_462E10();
F-- 00462E60 00000035 void sub_462E60();
F-- 00462EA0 00000613 void SealmuteControl();
F-- 004634C0 0000023F void sub_4634C0();
F-- 00463700 000001E7 void sub_463700();
FS- 004638F0 0000020A int32_t InitialiseLevel(int32_t level_num, int32_t type);
F-- 00463B00 00000065 void sub_463B00();
FS- 00463B70 00000049 void InitialiseLevelFlags(void);
FS- 00463BC0 0000006D void InitialiseObjects(void);
FS- 00463C30 0000160B void BaddyObjects(void);
FS- 00465240 000005D6 void TrapObjects(void);
FS- 00465820 00000C89 void ObjectObjects(void);
F-- 004664B0 000000D7 void sub_4664B0();
F-- 00466590 00000128 void sub_466590();
F-- 004666C0 000002CC void sub_4666C0();
F-- 00466990 00000468 void DrawShiva();
F-- 00466E00 00000203 void sub_466E00();
F-- 00467010 0000005F void InitialiseShiva();
F-- 00467070 000006DE void ShivaControl();
F-- 00467780 000000B4 void sub_467780();
FS- 00467840 000004B0 int32_t SoundEffect(int32_t sfx_num, PHD_3DPOS *pos, int32_t flags);
FS- 00467D00 0000005E void StopSoundEffect(int32_t sfx_num);
F-- 00467D60 00000086 void SOUND_EndScene();
F-- 00467DF0 00000024 void SOUND_Stop();
F-- 00467E20 00000020 void sub_467E20();
FS- 00467E40 00000128 int32_t TestCollision(ITEM_INFO *item, ITEM_INFO *lara_item);
FS- 00467F70 000002DD int32_t GetSpheres(ITEM_INFO *item, SPHERE *ptr, int32_t world_space);
FS- 00468250 0000032F void GetJointAbsPosition(ITEM_INFO *item, PHD_VECTOR *vec, int32_t joint);
F-- 00468580 00000034 void sub_468580();
FS- 004685C0 0000004A void SubInitialise(int16_t item_num);
FS- 00468610 00000162 void SubCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
F-- 00468780 000000C8 void sub_468780();
FS- 00468850 000003BE void SubDraw(ITEM_INFO *item);
FS- 00468C10 000003F8 int32_t SubControl(void);
F-- 00469010 00000138 void sub_469010();
F-- 00469150 000001CE void sub_469150();
F-- 00469320 00000630 void sub_469320();
F-- 00469980 000000FA void sub_469980();
FS- 00469A80 0000026A void SubEffects(int16_t item_num);
F-- 00469CF0 000000E7 void sub_469CF0();
F-- 00469DE0 0000002A void sub_469DE0();
F-- 00469E10 0000016E void sub_469E10();
F-- 00469F80 0000005D void InitialiseSwat();
F-- 00469FE0 0000089D void SwatControl();
F-- 0046A8B0 000000A4 void sub_46A8B0();
F-- 0046A960 00000289 void TargetControl();
F-- 0046AC00 00000062 void sub_46AC00();
FS- 0046AC70 0000002C void T_InitPrint(void);
FS- 0046ACA0 000000E2 TEXTSTRING *T_Print(int32_t x, int32_t y, int32_t z, const char *string);
FS- 0046AD90 00000037 void T_ChangeText(TEXTSTRING *txt, const char *string);
FS- 0046ADD0 0000002B void T_FlashText(TEXTSTRING *txt, int16_t enabled, int16_t rate);
FS- 0046AE00 00000090 void T_AddBackground(TEXTSTRING *txt, int16_t x_size, int16_t y_size, int16_t x_off, int16_t y_off, int16_t z_off, int16_t colour, SG_COL *gourptr, uint16_t flags);
FS- 0046AE90 00000010 void T_RemoveBackground(TEXTSTRING *txt);
FS- 0046AEA0 00000029 void T_AddOutline(TEXTSTRING *txt, int16_t enabled, int16_t colour, SG_COL *gourptr, uint16_t flags);
FS- 0046AED0 00000010 void T_RemoveOutline(TEXTSTRING *txt);
FS- 0046AEE0 0000001E void T_CentreH(TEXTSTRING *txt, int16_t enabled);
FS- 0046AF00 0000001E void T_CentreV(TEXTSTRING *txt, int16_t enabled);
FS- 0046AF20 0000001E void T_RightAlign(TEXTSTRING *txt, int16_t enabled);
FS- 0046AF40 0000001E void T_BottomAlign(TEXTSTRING *txt, int16_t enabled);
FS- 0046AF60 0000012E int32_t T_GetTextWidth(TEXTSTRING *txt);
FS- 0046B090 00000025 int32_t T_RemovePrint(TEXTSTRING *txt);
FS- 0046B0C0 00000024 void T_RemoveAllPrints(void);
FS- 0046B0F0 00000027 void T_DrawText(void);
FS- 0046B120 0000021F void T_DrawBorder(int32_t xpos, int32_t ypos, int32_t zpos, int32_t width, int32_t height);
FS- 0046B340 000003A6 void T_DrawThisText(TEXTSTRING *txt);
FS- 0046B6F0 0000002A uint32_t GetTextScaleH(uint32_t scale_h);
FS- 0046B720 0000002A uint32_t GetTextScaleV(uint32_t scale_v);
FS- 0046B750 000002F0 void TigerControl(int16_t item_num);
FS- 0046BA60 00000603 void TonyBossControl(int16_t item_num);
FS- 0046C080 00000041 void S_DrawTonyBoss(ITEM_INFO *item);
FS- 0046C0D0 00000042 void LondonBossDie(int16_t item_num);
FS- 0046C120 0000009D void InitialiseTonyBoss(int16_t item_num);
FS- 0046C1C0 00000297 void ExplodeTonyBoss(ITEM_INFO *item);
FS- 0046C460 000001D4 void TriggerTonyFlame(int16_t item_num, int32_t hand);
FS- 0046C640 0000021D void TriggerFireBall(ITEM_INFO *item, int32_t type, PHD_VECTOR *pos1, int16_t room_num, int16_t angle, int32_t zdspeed);
FS- 0046C860 0000049E void ControlTonyFireBall(int16_t fx_num);
FS- 0046CD00 00000239 void TriggerFireBallFlame(int16_t fx_num, int32_t type, int32_t xv, int32_t yv, int32_t zv);
FS- 0046CF40 0000020F void TrainControl(int16_t train_num);
FS- 0046D150 0000009F int32_t TrainTestHeight(ITEM_INFO *item, int32_t x, int32_t z, int16_t *room_num);
FS- 0046D1F0 00000147 void TrainCollision(int16_t train_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0046D340 000001BD void PropellerControl(int16_t item_num);
FS- 0046D500 00000150 void ControlSpikeWall(int16_t item_num);
FS- 0046D650 00000169 void ControlCeilingSpikes(int16_t item_num);
FS- 0046D7C0 0000008D void HookControl(int16_t item_num);
FS- 0046D850 0000016F void SpinningBlade(int16_t item_num);
FS- 0046D9C0 00000123 void IcicleControl(int16_t item_num);
FS- 0046DAF0 00000040 void InitialiseBlade(int16_t item_num);
FS- 0046DB30 00000098 void BladeControl(int16_t item_num);
FS- 0046DBD0 0000004C void InitialiseKillerStatue(int16_t item_num);
FS- 0046DC20 000000E2 void SpringBoardControl(int16_t item_num);
FS- 0046DD10 00000040 void InitialiseRollingBall(int16_t item_num);
FS- 0046DD50 00000389 void RollingBallControl(int16_t item_num);
FS- 0046E0E0 00000259 void RollingBallCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0046E340 00000089 void SpikeControl(int16_t item_num);
FS- 0046E3D0 0000015E void SpikeCollision(int16_t item_num, ITEM_INFO *lara_item, COLL_INFO *coll);
FS- 0046E530 00000053 void TrapDoorControl(int16_t item_num);
FS- 0046E590 0000005C void TrapDoorFloor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 0046E5F0 00000045 void TrapDoorCeiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 0046E640 000000A3 int32_t OnTrapDoor(ITEM_INFO *item, int32_t x, int32_t z);
FS- 0046E6F0 000001A0 void Pendulum(int16_t item_num);
FS- 0046E890 00000114 void FallingBlock(int16_t item_num);
FS- 0046E9B0 00000048 void FallingBlockFloor(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 0046EA00 00000044 void FallingBlockCeiling(ITEM_INFO *item, int32_t x, int32_t y, int32_t z, int32_t *height);
FS- 0046EA50 000000C8 void TeethTrap(int16_t item_num);
FS- 0046EB20 000000EE void FallingCeiling(int16_t item_num);
FS- 0046EC10 000001BD void DartEmitterControl(int16_t item_num);
FS- 0046EDD0 00000166 void DartsControl(int16_t item_num);
FS- 0046EF40 000000A8 void SideFlameEmitterControl(int16_t item_num);
FS- 0046EFF0 0000009C void FlameEmitterControl(int16_t item_num);
FS- 0046F090 0000009C void FlameEmitter2Control(int16_t item_num);
FS- 0046F130 000000AE void FlameEmitter3Control(int16_t item_num);
FS- 0046F1E0 00000183 void SideFlameDetection(FX_INFO *fx, int32_t length);
FS- 0046F370 00000770 void FlameControl(int16_t fx_num);
FS- 0046FAE0 00000049 void LaraBurn(void);
FS- 0046FB30 00000096 void LavaBurn(ITEM_INFO *item);
FS- 0046FBD0 000001AC void TriggerPendulumFlame(int16_t item_num);
FS- 0046FD80 0000077C void DinoControl(int16_t item_num);
FS- 00470530 00000610 void TribeAxeControl(int16_t item_num);
FS- 00470B70 00000774 void TribeBossControl(int16_t item_num);
FS- 004712F0 0000005D void S_DrawTribeBoss(ITEM_INFO *item);
FS- 00471350 000001C5 void TriggerElectricSparks(GAME_VECTOR *pos, int32_t shield);
FS- 00471520 00000042 void TribeBossDie(int16_t item_num);
FS- 00471570 00000105 void InitialiseTribeBoss(int16_t item_num);
FS- 00471680 000002B1 void FindClosestShieldPoint(int32_t x, int32_t y, int32_t z, ITEM_INFO *item);
FS- 00471960 000000C1 void RotateHeadXAngle(ITEM_INFO *item);
FS- 00471A30 00000195 void TriggerLizardMan(void);
FS- 00471BD0 00000256 void ExplodeTribeBoss(ITEM_INFO *item);
FS- 00471E30 0000017D void TriggerSummonSmoke(int32_t x, int32_t y, int32_t z);
FS- 00471FB0 0000004A int16_t FindLizardManItemNumber(int16_t room_num);
FS- 00472000 00000C05 void WillBossControl(int16_t item_num);
FS- 00472CE0 0000003A void S_DrawWillBoss(ITEM_INFO *item);
FS- 00472D20 00000035 void InitialiseWillBoss(int16_t item_num);
FS- 00472D60 0000027E void ExplodeWillBoss(ITEM_INFO *item);
FS- 00472FE0 000001C7 void TriggerPlasma(int16_t item_num, int32_t node, int32_t size);
FS- 004731B0 0000007A void TriggerPlasmaBall2(PHD_VECTOR *pos, int16_t room_num, int16_t angle, int16_t type);
FS- 00473230 0000033F void ControlWillbossPlasmaBall(int16_t fx_num);
FS- 00473570 00000210 void TriggerPlasmaBallFlame2(int16_t fx_num, int32_t type, int32_t xv, int32_t yv, int32_t zv);
FS- 00473780 0000005E void InitialiseWingmute(int16_t item_num);
FS- 004737E0 0000039D void WingmuteControl(int16_t item_num);
FS- 00473BA0 00000163 void TriggerWingMuteParticles(int16_t item_num);
FS- 00473D10 000003AD void WinstonControl(int16_t item_num);
FS- 00474110 00000185 void OldWinstonControl(int16_t item_num);
F-- 004742A0 00000090 void sub_4742A0();
F-- 00474330 00000427 void sub_474330();
F-- 00474760 00000143 void sub_474760();
F-- 004748B0 0000002E void sub_4748B0();
F-- 004748E0 0000001B void sub_4748E0();
F-- 00474900 0000022E void sub_474900();
F-- 00474B30 00000213 void sub_474B30();
F-- 00474D50 00000019 void sub_474D50();
F-- 00474D70 000003DC void sub_474D70();
F-- 00475160 000000D6 void sub_475160();
F-- 00475240 00000036 void sub_475240();
F-- 00475280 00000032 void sub_475280();
F-- 004752D0 00000012 void sub_4752D0();
F-- 00475380 00000039 void sub_475380();
F-- 00475400 00000022 void sub_475400();
F-- 00475450 0000005A void sub_475450();
F-- 004754B0 000000F3 void sub_4754B0();
F-- 004755B0 000000C9 void sub_4755B0();
F-- 00475680 00000029 void sub_475680();
F-- 004756B0 00000003 void sub_4756B0();
F-- 004756C0 0000002D void sub_4756C0();
F-- 004756F0 00000029 void sub_4756F0();
F-- 00475700 0000001F void sub_475700();
F-- 00475720 00000062 void sub_475720();
F-- 00475790 00000062 void sub_475790();
F-- 00475800 0000010C void sub_475800();
F-- 00475910 00000034 void TempVideoAdjust();
F-- 00475950 00000039 void TempVideoRemove();
F-- 00475990 00000035 void S_FadeInInventory();
F-- 004759D0 00000027 void S_FadeOutInventory();
F-- 00475A00 0000026F void S_DrawDashBar();
F-- 00475C70 000002EC void S_DrawHealthBar();
F-- 00475F60 0000025C void S_DrawAirBar();
F-- 004761C0 00000257 void S_DrawColdBar();
F-- 00476420 00000609 void sub_476420();
F-- 00476A30 00000261 void sub_476A30();
FS- 00476CA0 00000920 void DrawExplosionRings(void);
FS- 004775C0 00000666 void S_DrawFish(ITEM_INFO *item);
FS- 00477C30 000009CA void DrawKnockBackRings(void);
FS- 00478600 000005EF void LaraElectricDeath(int32_t copy, ITEM_INFO *item);
FS- 00478BF0 0000091C void S_DrawLaserBolts(ITEM_INFO *item);
FS- 00479510 000002FD int32_t ClipLine(int32_t *x1, int32_t *y1, int32_t *x2, int32_t *y2, int32_t sw, int32_t sh);
FS- 00479810 00000402 void S_DrawLaserBeam(GAME_VECTOR *src, GAME_VECTOR *dest, uint8_t r, uint8_t g, uint8_t b);
FS- 00479C20 00000882 void DrawLondonBossShield(ITEM_INFO *item);
F-- 0047A4B0 000005C1 void sub_47A4B0();
F-- 0047AA80 00000835 void sub_47AA80();
F-- 0047B2C0 000007D3 void sub_47B2C0();
F-- 0047BAA0 00000800 void sub_47BAA0();
FS- 0047C2A0 0000096A void DrawSummonRings(void);
F-- 0047CC10 00000882 void sub_47CC10();
FS- 0047D4A0 00000CD0 void TriggerTribeBossHeadElectricity(ITEM_INFO *item, int32_t copy);
FS- 0047E170 00000AB7 void TriggerElectricBeam(ITEM_INFO *item, GAME_VECTOR *src, int32_t copy);
F-- 0047EC30 0000088B void sub_47EC30();
F-- 0047F4C0 00000762 void sub_47F4C0();
F-- 0047FC30 00000882 void sub_47FC30();
F-- 004804D0 00000012 void sub_4804D0();
F-- 00480580 00000039 void sub_480580();
F-- 00480600 0000002E void sub_480600();
F-- 00480630 0000010E void sub_480630();
F-- 00480740 00000045 void sub_480740();
F-- 00480790 0000011D void sub_480790();
F-- 004808B0 00000039 void sub_4808B0();
F-- 004808F0 0000002C void sub_4808F0();
F-- 00480920 00000031 void sub_480920();
F-- 00480960 0000002F void sub_480960();
F-- 004809C0 00000005 void sub_4809C0();
F-- 004809D0 0000009C void sub_4809D0();
F-- 00480A70 0000001A void sub_480A70();
F-- 00480A90 000000E2 void sub_480A90();
F-- 00480B80 00000091 void sub_480B80();
F-- 00480C20 0000001C void sub_480C20();
F-- 00480C40 000000CE void sub_480C40();
F-- 00480D10 0000002A void sub_480D10();
F-- 00480D40 0000000E void sub_480D40();
FS- 00480D50 00000049 BOOL MyReadFile(HANDLE hFile, void* pBuffer, DWORD nNumberOfBytesToRead, DWORD* pNumberOfBytesRead, OVERLAPPED* pOverlapped);
FS- 00480DA0 000001C1 int32_t LoadTexturePages(HANDLE file);
FS- 00480F70 000003F0 int32_t LoadRooms(HANDLE file);
F-- 00481360 0000006E void sub_481360();
FS- 004813D0 000004BE int32_t LoadObjects(HANDLE file);
FS- 00481890 00000136 int32_t LoadSprites(HANDLE file);
FS- 004819D0 000001E1 int32_t LoadItems(HANDLE file);
FS- 00481BC0 000000DA int32_t LoadDepthQ(HANDLE file);
FS- 00481CA0 000000AD int32_t LoadPalette(HANDLE file);
FS- 00481D50 00000060 int32_t LoadCameras(HANDLE file);
FS- 00481DB0 00000060 int32_t LoadSoundEffects(HANDLE file);
FS- 00481E10 00000206 int32_t LoadBoxes(HANDLE file);
FS- 00482020 0000011C int32_t LoadAnimatedTextures(HANDLE file);
FS- 00482140 00000079 int32_t LoadCinematic(HANDLE file);
FS- 004821C0 0000008A int32_t LoadDemo(HANDLE file);
FS- 00482250 0000009A void LoadDemFile(char *filename);
FS- 004822F0 00000265 int32_t LoadSamples(HANDLE file);
F-- 00482560 00000036 void sub_482560();
F-- 004825A0 00000026 void str_to_wstr();
F-- 004825D0 000000EA void sub_4825D0();
FS- 004826C0 00000248 int32_t LoadLevel(char *filename, int32_t req_level);
F-- 00482910 0000007D void S_LoadLevelFile();
F-- 00482990 0000002A void sub_482990();
F-- 004829C0 000000C6 void sub_4829C0();
F-- 00482A90 000006D1 void sub_482A90();
F-- 00483170 000002F5 void sub_483170();
F-- 00483470 00000048 void sub_483470();
F-- 004834C0 0000007A void sub_4834C0();
F-- 00483540 00000097 void sub_483540();
F-- 004835E0 00000023 void sub_4835E0();
F-- 00483610 00000039 void S_DrawScreenLine();
F-- 00483650 00000116 void S_DrawScreenBox();
F-- 00483770 0000003D void S_DrawScreenFBox();
F-- 004837B0 0000000F void sub_4837B0();
F-- 004837C0 00000001 void nullsub_1();
F-- 004837D0 00000057 void sub_4837D0();
F-- 00483830 0000000E void sub_483830();
F-- 00483840 00000013 void sub_483840();
F-- 00483860 0000007A void mGetAngle();
F-- 004838E0 00000073 void sub_4838E0();
F-- 00483960 0000013F void StartGame();
F-- 00483AA0 000000A4 void GameLoop();
FS- 00483B50 00000006 int32_t LevelCompleteSequence(int32_t level_num);
FS- 00483B60 00000435 int32_t LevelStats(int32_t level_num);
F-- 00483FA0 00000033 void sub_483FA0();
F-- 00483FE0 00000030 void sub_483FE0();
FS- 00484010 000001D4 int32_t GameStats(int32_t level_num, int32_t type);
FS- 004841F0 0000001E int32_t GetRandomControl(void);
FS- 00484210 0000000A void SeedRandomControl(int32_t seed);
FS- 00484220 0000001E int32_t GetRandomDraw(void);
FS- 00484240 0000000A void SeedRandomDraw(int32_t seed);
FS- 00484250 00000044 void GetValidLevelsList(REQUEST_INFO *req);
FS- 004842A0 0000004C void GetSavedGamesList(REQUEST_INFO *req);
FS- 004842F0 00000112 void DisplayCredits(void);
FS- 00484410 00000165 int32_t S_FrontEndCheck(void *data, int32_t size);
FS- 00484580 00000114 int32_t S_SaveGame(void *data, int32_t size, int32_t slot);
FS- 004846A0 00000096 int32_t S_LoadGame(void *data, int32_t size, int32_t slot);
F-- 00484740 000002C1 void sub_484740();
F-- 00484A10 0000000B void sub_484A10();
F-- 00484A20 0000001F void sub_484A20();
F-- 00484A40 00000040 void sub_484A40();
F-- 00484A80 00000059 void sub_484A80();
F-- 00484AE0 00000088 void HWR_EnableZBuffer();
F-- 00484B70 00000079 void sub_484B70();
F-- 00484BF0 0000003F void sub_484BF0();
F-- 00484C30 000001A2 void sub_484C30();
F-- 00484DE0 0000003F void sub_484DE0();
F-- 00484E20 00000082 void sub_484E20();
F-- 00484EB0 0000006C void sub_484EB0();
F-- 00484F00 00000006 void sub_484F00();
F-- 00484F10 000001FC void sub_484F10();
F-- 00485130 00000200 void sub_485130();
F-- 00485350 00000153 void sub_485350();
F-- 004854C0 000000EC void sub_4854C0();
F-- 004855C0 00000335 void sub_4855C0();
F-- 00485900 000000B3 void sub_485900();
F-- 004859C0 00000044 void sub_4859C0();
F-- 00485A10 0000006E void sub_485A10();
F-- 00485A90 00000012 void sub_485A90();
F-- 00485AB0 000001ED void sub_485AB0();
F-- 00485CA0 00000037 void sub_485CA0();
F-- 00485CE0 000001B7 void sub_485CE0();
F-- 00485EA0 000000B1 void sub_485EA0();
F-- 00485F60 00000021 void sub_485F60();
F-- 00485F90 0000006C void game_malloc();
F-- 00486010 00000034 void sub_486010();
F-- 00486050 000000E8 void sub_486050();
F-- 00486140 00000120 void Key();
FS- 00486260 0000047B int32_t S_UpdateInput(void);
F-- 004866E0 000004BC void sub_4866E0();
FS- 00486BA0 000009AA void S_CalculateLight(int32_t x, int32_t y, int32_t z, int16_t room_num, ITEM_LIGHT *il);
FS- 00487550 00000032 void S_CalculateStaticLight(int16_t adder);
F-- 00487590 0000018F void sub_487590();
F-- 00487720 00000021 void sub_487720();
F-- 00487750 0000008C void do_inventory_options();
F-- 00487870 00000368 void sub_487870();
FS- 00487BE0 00000678 void do_passport_option(INVENTORY_ITEM *item);
F-- 00488260 00000CAF void sub_488260();
F-- 00488F30 0000049D void sub_488F30();
F-- 004893D0 000000C0 void sub_4893D0();
F-- 00489490 0000007E void sub_489490();
F-- 00489510 00000040 void sub_489510();
F-- 00489550 00000706 void sub_489550();
F-- 00489C70 0000048D void sub_489C70();
F-- 0048A100 00000096 void sub_48A100();
F-- 0048A1A0 00000043 void sub_48A1A0();
FS- 0048A1F0 00000006 int32_t GetRenderHeight(void);
FS- 0048A200 00000006 int32_t GetRenderWidth(void);
F-- 0048A210 0000008C void S_InitialisePolyList();
F-- 0048A2A0 0000002D void S_DumpCine();
F-- 0048A2D0 0000004E void S_DumpScreen();
F-- 0048A320 0000000B void S_ClearScreen();
F-- 0048A330 00000036 void sub_48A330();
F-- 0048A370 0000014A void S_OutputPolyList();
FS- 0048A4C0 0000029C int32_t S_GetObjectBounds(int16_t *obj_ptr);
F-- 0048A760 00000045 void sub_48A760();
F-- 0048A7B0 000001F3 void sub_48A7B0();
F-- 0048A9B0 00000044 void sub_48A9B0();
F-- 0048AA00 000000C0 void sub_48AA00();
FS- 0048AAC0 00000051 void S_SetupBelowWater(int32_t underwater);
FS- 0048AB20 00000021 void S_SetupAboveWater(int32_t underwater);
FS- 0048AB50 000000AB void S_AnimateTextures(int32_t nframes);
F-- 0048AC00 00000010 void sub_48AC00();
F-- 0048AC10 0000000D void sub_48AC10();
F-- 0048AC20 00000097 void sub_48AC20();
F-- 0048ACC0 0000009D void sub_48ACC0();
F-- 0048AD60 00000011 void sub_48AD60();
F-- 0048AD80 00000011 void sub_48AD80();
F-- 0048ADA0 00000223 void sub_48ADA0();
F-- 0048AFD0 000000FE void sub_48AFD0();
FS- 0048B0D0 000000B8 bool LoadPicture(char* File, LPDIRECTDRAWSURFACE3 lpPictureBuffer, int32_t);;
F-- 0048B190 000000E0 void sub_48B190();
F-- 0048B270 0000008E void MemBlt();
F-- 0048B300 00000068 void sub_48B300();
F-- 0048B370 0000042D void sub_48B370();
F-- 0048B7A0 00000284 void DrawTile();
FS- 0048BA30 00000232 void DrawPicture(void);
FS- 0048BC70 0000009D void FadePictureUp(void);
FS- 0048BD10 00000144 void FadePictureDown(void);
FS- 0048BE60 000000DE void CreateMonoScreen(void);
F-- 0048BF40 000000C5 void sub_48BF40();
FS- 0048C010 00000016 void DrawMonoScreen(void);
FS- 0048C030 00000035 void RemoveMonoScreen(int32_t fade);
FS- 0048C070 00000022 void DoInventoryPicture(void);
F-- 0048C0A0 000000A2 void sub_48C0A0();
FS- 0048C150 000002C0 int32_t GameMain(void);
F-- 0048C410 0000013D void sub_48C410();
F-- 0048C550 00000345 void CheckCheatMode();
F-- 0048C8C0 0000032B void S_SaveSettings();
F-- 0048CBF0 000004A1 void S_LoadSettings();
F-- 0048D0A0 0000002A void sub_48D0A0();
F-- 0048D0D0 00000046 void sub_48D0D0();
F-- 0048D120 00000026 void sub_48D120();
F-- 0048D150 00000046 void sub_48D150();
F-- 0048D1A0 00000039 void sub_48D1A0();
F-- 0048D1E0 0000001C void sub_48D1E0();
F-- 0048D200 0000000A void sub_48D200();
F-- 0048D210 00000017 void S_SoundStopSample();
F-- 0048D230 0000003C void S_SoundStopAllSamples();
F-- 0048D240 0000001F void sub_48D240();
F-- 0048D260 0000007E void S_CDLoop();
FS- 0048D480 00000014 void S_CDPlay(int16_t track, int32_t mode);
F-- 0048D4A0 00000005 void S_CDStop();
F-- 0048D4B0 00000021 void S_StartSyncedAudio();
F-- 0048D4E0 00000005 void sub_48D4E0();
F-- 0048D4F0 0000000E void S_CDVolume();
F-- 0048D500 000000C8 void sub_48D500();
F-- 0048D5D0 0000000C void sub_48D5D0();
F-- 0048D5E0 00000041 void sub_48D5E0();
F-- 0048D630 00000069 void sub_48D630();
F-- 0048D6A0 0000003A void sub_48D6A0();
F-- 0048D6E0 000002CA void sub_48D6E0();
F-- 0048D9B0 0000069A void sub_48D9B0();
F-- 0048E050 0000038F void sub_48E050();
F-- 0048E3E0 00000060 void sub_48E3E0();
F-- 0048E440 0000004E void sub_48E440();
F-- 0048E490 0000006F void sub_48E490();
F-- 0048E500 0000002C void sub_48E500();
F-- 0048E530 0000003B void sub_48E530();
F-- 0048E570 00000061 void sub_48E570();
F-- 0048E5E0 000000E7 void sub_48E5E0();
F-- 0048E6D0 00000036 void sub_48E6D0();
F-- 0048E710 00000013 void sub_48E710();
F-- 0048E730 00000034 void sub_48E730();
F-- 0048E770 00000034 void sub_48E770();
F-- 0048E7B0 00000034 void sub_48E7B0();
F-- 0048E7F0 00000034 void sub_48E7F0();
F-- 0048E830 0000002F void sub_48E830();
F-- 0048E860 0000003E void sub_48E860();
F-- 0048E8A0 00000050 void sub_48E8A0();
F-- 0048E8F0 00000032 void sub_48E8F0();
F-- 0048E930 0000003C void sub_48E930();
F-- 0048E970 00000037 void sub_48E970();
F-- 0048E9B0 00000037 void sub_48E9B0();
F-- 0048E9F0 00000037 void sub_48E9F0();
FS- 0048EA30 00000178 void ControlFusebox(int16_t item_num);
F-- 0048EBB0 00000129 void sub_48EBB0();
F-- 0048ECE0 000000FB void sub_48ECE0();
F-- 0048EDE0 000000F5 void sub_48EDE0();
F-- 0048EEE0 000000E8 void sub_48EEE0();
F-- 0048EFD0 000001F0 void Callback();
F-- 0048F1C0 0000002D void sub_48F1C0();
F-- 0048F1F0 000001C2 void sub_48F1F0();
F-- 0048F3C0 000007ED void sub_48F3C0();
F-- 0048FBB0 000001F3 void sub_48FBB0();
F-- 0048FDB0 00000046 void sub_48FDB0();
F-- 0048FE40 00000057 void sub_48FE40();
F-- 0048FEA0 00000019 void sub_48FEA0();
F-- 0048FEC0 0000001A void sub_48FEC0();
F-- 0048FEE0 00000023 void sub_48FEE0();
F-- 0048FF10 00000048 void sub_48FF10();
F-- 0048FF60 0000001A void sub_48FF60();
F-- 0048FF80 00000015 void sub_48FF80();
F-- 0048FFA0 0000001F void sub_48FFA0();
F-- 0048FFC0 000000E1 void sub_48FFC0();
F-- 004900B0 00000010 void sub_4900B0();
F-- 004900C0 00000048 void sub_4900C0();
F-- 00490110 000002EF void sub_490110();
F-- 00490400 000002F3 void sub_490400();
F-- 00490700 0000008E void sub_490700();
F-- 00490780 00000119 void sub_490780();
F-- 004908A0 000000C5 void sub_4908A0();
F-- 00490970 00000013 void sub_490970();
F-- 00490990 0000000C void sub_490990();
F-- 004909A0 0000005F void sub_4909A0();
F-- 00490A00 00000016 void sub_490A00();
F-- 00490A20 00000071 void sub_490A20();
F-- 00490AE0 00000025 void sub_490AE0();
F-- 00490B10 00000022 void sub_490B10();
F-- 00490B40 00000058 void sub_490B40();
F-- 00490BA0 00000359 void sub_490BA0();
F-- 00490F10 0000003C void sub_490F10();
F-- 00490F50 0000002E void sub_490F50();
F-- 00490F80 00000047 void sub_490F80();
F-- 00490FD0 00000047 void sub_490FD0();
F-- 00491020 00000040 void sub_491020();
F-- 00491060 00000397 void sub_491060();
F-- 00491400 0000027A void sub_491400();
F-- 00491680 000002BF void sub_491680();
F-- 00491940 0000032C void sub_491940();
F-- 00491C70 00000224 void sub_491C70();
F-- 00491EA0 000001FF void sub_491EA0();
F-- 004920A0 00000180 void sub_4920A0();
F-- 00492220 0000019A void sub_492220();
F-- 004923C0 00000255 void sub_4923C0();
F-- 00492620 00000349 void sub_492620();
F-- 00492970 0000035E void sub_492970();
F-- 00492CD0 00000702 void sub_492CD0();
F-- 004933E0 000000CE void sub_4933E0();
F-- 004934D0 0000005A void sub_4934D0();
F-- 00493530 00000266 void sub_493530();
F-- 004937F0 0000011A void sub_4937F0();
F-- 00493920 00000348 void sub_493920();
F-- 00493C70 00000A3B void sub_493C70();
F-- 004946B0 00000777 void sub_4946B0();
F-- 00494E30 000004A4 void sub_494E30();
F-- 004953B0 000000D4 void sub_4953B0();
F-- 00496930 00000132 void sub_496930();
F-- 00496A70 000000AA void sub_496A70();
F-- 00496B20 0000008F void sub_496B20();
F-- 00496BB0 00000061 void sub_496BB0();
F-- 00496C20 0000063C void DialogFunc();
F-- 00497290 00000294 void sub_497290();
F-- 00497530 000000F6 void sub_497530();
F-- 00497630 000000C5 void sub_497630();
F-- 00497700 000000C5 void sub_497700();
F-- 004977D0 00000448 void sub_4977D0();
F-- 00497C20 000003B3 void sub_497C20();
F-- 00497FE0 00000766 void sub_497FE0();
F-- 00498750 0000010A void sub_498750();
F-- 00498860 0000053A void sub_498860();
F-- 00498DA0 00001039 void sub_498DA0();
F-- 00499DE0 0000072F void sub_499DE0();
F-- 0049A510 0000027C void sub_49A510();
F-- 0049A790 00000AD1 void sub_49A790();
F-- 0049B270 000005D8 void sub_49B270();
F-- 0049B890 00000882 void sub_49B890();
F-- 0049C160 00000CC0 void sub_49C160();
F-- 0049CE20 00000AF9 void sub_49CE20();
F-- 0049D920 0000112F void sub_49D920();
F-- 0049EA50 000013BB void sub_49EA50();
F-- 0049FE10 00002464 void sub_49FE10();
F-- 004A2280 0000221F void sub_4A2280();
F-- 004A44A0 00000482 void sub_4A44A0();
F-- 004A4930 0000067C void sub_4A4930();
F-- 004A4FB0 00000E98 void sub_4A4FB0();
F-- 004A5E50 00000D40 void sub_4A5E50();
F-- 004A6F20 000014A6 void sub_4A6F20();
F-- 004A83D0 0000150E void sub_4A83D0();
F-- 004A98E0 0000163D void sub_4A98E0();
F-- 004AAF20 0000262F void sub_4AAF20();
F-- 004AD550 000026BB void sub_4AD550();
F-- 004AFC10 00000F39 void sub_4AFC10();
F-- 004B0B50 0000101F void sub_4B0B50();
F-- 004B1B70 0000000A void sub_4B1B70();
F-- 004B1B80 00000070 void sub_4B1B80();
F-- 004B1BF0 0000019B void sub_4B1BF0();
F-- 004B1D90 0000017A void sub_4B1D90();
F-- 004B1F10 00000098 void sub_4B1F10();
F-- 004B1FB0 0000001B void sub_4B1FB0();
F-- 004B1FD0 00000025 void sub_4B1FD0();
F-- 004B2000 0000001B void sub_4B2000();
F-- 004B2020 0000009A void sub_4B2020();
F-- 004B20C0 000000B3 void sub_4B20C0();
F-- 004B2180 0000006A void sub_4B2180();
F-- 004B21F0 00000034 void sub_4B21F0();
F-- 004B2230 0000004B void sub_4B2230();
F-- 004B2280 000000EF void sub_4B2280();
F-- 004B2370 0000005C void sub_4B2370();
F-- 004B23D0 0000056E void sub_4B23D0();
F-- 004B2940 00000306 void WinMain();
F-- 004B2C50 0000000C void sub_4B2C50();
F-- 004B2C60 000000DF void sub_4B2C60();
F-- 004B2D40 00000074 void sub_4B2D40();
F-- 004B2DC0 0000004B void sub_4B2DC0();
F-- 004B2E10 00000070 void sub_4B2E10();
F-- 004B2E80 000000FA void sub_4B2E80();
F-- 004B2F80 0000054F void sub_4B2F80();
F-- 004B34D0 0000007F void sub_4B34D0();
F-- 004B3550 0000026A void sub_4B3550();
F-- 004B37C0 0000005B void S_ExitSystem();
F-- 004B3830 000000D0 void sub_4B3830();
F-- 004B3900 0000002E void sub_4B3900();
F-- 004B3930 00000016 void sub_4B3930();
F-- 004B3950 00000044 void sub_4B3950();
F-- 004B39A0 00000046 void sub_4B39A0();
F-- 004B39F0 0000004D void sub_4B39F0();
F-- 004B3A40 00000029 void sub_4B3A40();
F-- 004B3A70 000001D8 void sub_4B3A70();
F-- 004B3C50 000000BF void sub_4B3C50();
F-- 004B3D10 0000032A void sub_4B3D10();
F-- 004B4040 0000005C void sub_4B4040();
F-- 004B40A0 000001D3 void SaveDDBuffer();
FS- 004B4280 0000001E void phd_PushMatrix(void);
FS- 004B429E 00000033 void phd_PushUnitMatrix(void);
F-- 004B42D4 00000061 void sub_4B42D4();
F-- 004B4335 0000013A void sub_4B4335();
F-- 004B446F 00000160 void sub_4B446F();
F-- 004B45CF 000002FD void sub_4B45CF();
F-- 004B48CC 00000341 void sub_4B48CC();
FS- 004B4C10 00000048 int32_t phd_atan(int32_t x, int32_t y);
FS- 004B4C58 00000006 int32_t phd_cos(int32_t angle);
FS- 004B4C5E 0000001B int32_t phd_sin(int32_t angle);
F-- 004B4C79 0000001A void sub_4B4C79();
FS- 004B4C93 0000002C int32_t phd_sqrt(int32_t n);

V-- 0043E8C8 - void (*g_LaraExtraControlRoutines[13])(ITEM_INFO *item, COLL_INFO *coll);
V-- 0043E8D7 - void (*g_LaraControlRoutines[89])(ITEM_INFO *item, COLL_INFO *coll);
V-- 005A6A2C - PHD_MATRIX *g_PhdMatrixPtr;
V-- 005A6AC0 - PHD_MATRIX g_W2VMatrix;
V-- 005BAB58 - PHD_MATRIX g_MatrixStack[40];
V-- 00633F50 - int32_t g_CurrentLevel;
V-- 0069FDF0 - uint32_t g_Input;
V-- 006CF810 - PHD_VECTOR g_CamRot;
V-- 006D6180 - int16_t g_ExposureMeter;
V-- 006D61A0 - LARA_INFO g_Lara;
V-- 006D62A0 - int16_t g_DashTimer;
V-- 006D67A0 - uint32_t g_RequesterFlags2[24]; // MAX_LEVELS
V-- 006D6800 - uint32_t g_RequesterFlags1[24]; // MAX_LEVELS
V-- 006D76E0 - uint32_t SaveGameReqFlags2[24]; // MAX_LEVELS;
V-- 006D7740 - uint32_t SaveGameReqFlags1[24]; // MAX_LEVELS;
V-- 006D78A4 - char **g_GF_Level_Names;
V-- 006DCAC0 - OBJECT_INFO g_Objects[376];
